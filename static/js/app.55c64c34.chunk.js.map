{"version":3,"sources":["components/Task.js","components/TaskList.js","screens/MainTasksScreen.js","screens/TaskDetailScreen.js","components/Forms/colors.js","components/Forms/FormErrorMessage.js","components/Forms/FormTextInput.js","components/Forms/FormButton.js","components/Forms/FormSwitch.js","components/Form.js","components/Forms/Form.js","components/Forms/FormField.js","firebase.js","screens/CreateTaskScreen.js","components/UserProfile.js","screens/ViewPatientsScreen.js","utils/dataTask.js","components/PrebuiltTask.js","screens/PrebuiltTaskScreen.js","screens/EditTaskScreen.js","App.js"],"names":["row","fontSize","marginLeft","marginRight","styles","StyleSheet","create","container","display","flexDirection","backgroundColor","alignItems","marginTop","paddingTop","paddingBottom","width","borderWidth","borderColor","borderRadius","title","fontWeight","dateDue","fontStyle","incompleteStatus","color","completeStatus","urgencyStatus","urgencyView","flex","textView","Task","task","view","TouchableOpacity","onPress","View","style","Text","status","urgency","maxWidth","TaskList","tasks","ScrollView","map","idx","key","justifyContent","newTaskButton","textAlign","padding","shadowOffset","height","shadowColor","shadowOpacity","MainTasksScreen","navigation","thisUser","route","params","user","userId","id","taskArray","Object","keys","push","navigate","statusContainer","paddingLeft","paddingRight","marginBottom","description","resource","textDecorationLine","date","owner","TaskDetailScreen","dateCreated","resources","Linking","openURL","Button","primary","secondary","black","white","ghostWhite","lightGrey","mediumGrey","red","lightPurple","FormErrorMessage","error","visible","errorText","Colors","FormTextInput","leftIcon","rightIcon","handlePasswordVisibility","otherProps","MaterialCommunityIcons","name","size","icon","TextInput","input","placeholderTextColor","rightIconStyles","marginVertical","alignSelf","button","buttonText","textTransform","Form","props","children","initialValues","onSubmit","validationSchema","Fragment","Base","Field","useFormikContext","setFieldTouched","setFieldValue","values","errors","touched","value","onChangeText","text","onBlur","handleSubmit","ErrorMessage","Switch","onChange","x","onValueChange","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","addTaskButton","h1_text","field","fieldContainer","label","connectButton","margin","connectText","roleButton","CreateTaskScreen","useState","submitted","setSubmitted","detail","SafeAreaView","comments","notifications","a","async","newTask","Date","database","ref","child","now","set","catch","console","log","message","placeholder","autoCapitalize","UserProfile","patientInfo","ViewPatientsScreen","userList","setUserList","useEffect","db","handleData","snap","val","users","on","off","PrebuiltTaskArray","PrebuiltTask","prebuiltTask","PrebuiltTaskScreen","EditTaskScreen","Stack","createStackNavigator","App","NavigationContainer","Navigator","screenOptions","headerStyle","headerTintColor","headerTitleStyle","headerTitleContainerStyle","left","Screen","component","options"],"mappings":"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","file":"static/js/app.55c64c34.chunk.js","sourcesContent":["import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native'\n\n// TODO (L11): conditional styling?\n\nconst Task = ({ task, view }) => {\n\n  return (\n  <TouchableOpacity onPress={() => view(task)}>\n    <View style={styles.container}>\n      <View style={styles.textView}>\n        <Text style={styles.title}>{task.title}</Text>\n        <Text style={styles.dateDue}>Due: {task.dateDue}</Text>\n        <Text style={styles.incompleteStatus}>Status: {task.status}</Text>\n      </View>\n      <View style={styles.urgencyView}>\n        <Text style={styles.urgencyStatus}>{task.urgency === 1 ? \"❗️\": \"\"} </Text>\n      </View>\n    </View>\n  </TouchableOpacity>\n  )\n}\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    backgroundColor: '#fff',\n    alignItems: 'flex-start',\n    marginTop: 20,\n    paddingTop: 5,\n    paddingBottom: 5,\n    width: '100%',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 5,\n  },\n  title: {\n    ...row,\n    fontWeight: \"500\",\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n  urgencyStatus: {\n    ...row,\n    color: 'red',\n    fontSize: 32,\n  },\n  urgencyView: {\n    ...row,\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-end',\n  },\n  textView: {\n    ...row,\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    width: '65%',\n    color: 'red',\n  },\n})\n\nexport default Task\n","import React from 'react'\nimport { ScrollView, StyleSheet } from 'react-native'\nimport Task from './Task'\n\nconst TaskList = ({ tasks, view }) => {\n\n  return (\n    <ScrollView style={styles.container}>\n\n      {tasks.map((task, idx) => (\n        <Task key={idx} task={task} view={view} />\n      ))}\n    </ScrollView>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '85%',\n    maxWidth: 800,\n  },\n})\n\nexport default TaskList\n","import React from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity, Button } from 'react-native'\nimport { users } from '../utils/data'\nimport TaskList from '../components/TaskList'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\n\nconst MainTasksScreen = ({ navigation, route }) => {\n  const view = (task) => {\n    navigation.navigate('TaskDetailScreen', {task, userId})\n  }\n\n  const thisUser = route.params.user\n  const userId = thisUser.id\n\n  const taskArray = [];\n  Object.keys(thisUser.tasks).map((key) => {\n    let task = thisUser.tasks[key];\n    task['id'] = key;\n    taskArray.push(task);\n  })\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => navigation.navigate('PrebuiltTaskScreen', {userId})}\n        style={styles.newTaskButton}\n      >\n        <Text style={styles.title}>Create new task</Text>\n      </TouchableOpacity>\n      <TaskList tasks={taskArray} view={view}/>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset:{width: 2,  height: 2},\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default MainTasksScreen\n","import React from 'react'\nimport { Text, View, StyleSheet, Linking, Button } from 'react-native'\n\nconst TaskDetailScreen = ({ navigation, route }) => {\n  const task = route.params.task\n  const userId = route.params.userId\n\n  // handle comments & notif later\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{task.title}</Text>\n      <Text style={styles.date}>\n        Created: {task.dateCreated} | Due: {task.dateDue}\n      </Text>\n      <Text style={styles.owner}>- {task.owner} -</Text>\n      <Text style={styles.description}>{task.description}</Text>\n      {task.resources != \"\" &&\n      <Text\n          style={styles.resource}\n          onPress={() => Linking.openURL(task.resources)}\n        >\n          {task.resources}\n      </Text>\n      }\n      \n      <View style={styles.statusContainer}>\n        <Text style={styles.incompleteStatus}>{task.status}</Text>\n      </View>\n      <Button \n        title= \"Edit Task\"\n        onPress={ () => navigation.navigate('EditTaskScreen', {task, userId}) }\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  statusContainer: {\n    backgroundColor: 'white',\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 75,\n    paddingRight: 75,\n    borderWidth: 1,\n    borderColor: 'black',\n    marginBottom: 15,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"500\",\n  },\n  description: {\n    fontSize: 16,\n    marginBottom: 10,\n  },\n  resource: {\n    fontSize: 16,\n    marginBottom: 10,\n    color: \"blue\",\n    textDecorationLine: \"underline\",\n  },\n  date: {\n    fontSize: 14,\n    fontStyle: 'italic',\n    marginBottom: 5,\n  },\n  incompleteStatus: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'red',\n  },\n  completeStatus: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'green',\n  },\n  owner: {\n    marginBottom: 30,\n  },\n})\n\nexport default TaskDetailScreen\n","export default {\n  primary: 'lightblue',\n  secondary: '#039be5',\n  black: '#222222',\n  white: '#ffffff',\n  ghostWhite: '#f8f8ff',\n  lightGrey: '#f9f9f9',\n  mediumGrey: '#6e6869',\n  red: '#fc5c65',\n  lightPurple: '#c3a6ff',\n}\n","import React from 'react'\nimport { StyleSheet, Text } from 'react-native'\n\nimport Colors from './colors'\n\nexport default function FormErrorMessage({ error, visible }) {\n  if (!error || !visible) {\n    return null\n  }\n\n  return <Text style={styles.errorText}>{error}</Text>\n}\n\nconst styles = StyleSheet.create({\n  errorText: {\n    marginLeft: 15,\n    color: Colors.red,\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: '600',\n  },\n})\n","import React from 'react'\nimport { View, StyleSheet, TextInput, TouchableOpacity } from 'react-native'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\n\nimport Colors from './colors'\n\nexport default function FormTextInput({\n  leftIcon,\n  width = '100%',\n  rightIcon,\n  handlePasswordVisibility,\n  ...otherProps\n}) {\n  return (\n    <View style={[styles.container, { width }]}>\n      {leftIcon && (\n        <MaterialCommunityIcons\n          name={leftIcon}\n          size={20}\n          color={Colors.mediumGrey}\n          style={styles.icon}\n        />\n      )}\n      <TextInput\n        style={styles.input}\n        placeholderTextColor={Colors.mediumGrey}\n        {...otherProps}\n      />\n      {rightIcon && (\n        <TouchableOpacity onPress={handlePasswordVisibility}>\n          <MaterialCommunityIcons\n            name={rightIcon}\n            size={20}\n            color={Colors.mediumGrey}\n            style={styles.rightIconStyles}\n          />\n        </TouchableOpacity>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.lightGrey,\n    borderRadius: 25,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    padding: 15,\n    marginVertical: 10,\n  },\n  icon: {\n    marginRight: 10,\n  },\n  input: {\n    flex: 1,\n    width: '100%',\n    fontSize: 18,\n    color: Colors.black,\n  },\n  rightIconStyles: {\n    alignSelf: 'center',\n    marginLeft: 10,\n  },\n})\n","import React from 'react'\nimport { Text, TouchableOpacity, StyleSheet } from 'react-native'\nimport { useFormikContext } from 'formik'\n\nimport Colors from './colors'\n\nexport default function FormButton({ title, onPress, color = 'lightPurple' }) {\n  const { handleSubmit, values } = useFormikContext()\n  const onPressAndSubmit = () => {\n    if (onPress) { onPress() };\n    handleSubmit();\n  }\n  const text = typeof title === 'function' ? title(values) : title\n\n  return (\n    <TouchableOpacity\n      style={[styles.button, { backgroundColor: Colors[color] }]}\n      onPress={onPressAndSubmit}\n    >\n      <Text style={styles.buttonText}>{text}</Text>\n    </TouchableOpacity>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset:{ width: 2,  height: 2, },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  buttonText: {\n    color: Colors.black,\n    fontSize: 18,\n    fontWeight: '600',\n    textTransform: 'uppercase',\n  },\n  \n})\n","import React from 'react'\nimport { StyleSheet, Switch, Text, View } from 'react-native'\nimport { useFormikContext } from 'formik'\n\nimport Colors from './colors'\n\nexport default function FormSwitch({\n  name,\n  title,\n  onChange = (x) => x,\n  ...otherProps\n}) {\n  const { values, setFieldValue } = useFormikContext()\n  const value = values[name]\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{title}</Text>\n      <Switch\n        value={value}\n        onValueChange={(value) => {\n          onChange(value)\n          setFieldValue(name, value)\n        }}\n        {...otherProps}\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  title: {\n    color: Colors.white,\n    fontSize: 18,\n    fontWeight: '600',\n    marginRight: 5,\n  },\n})\n","import Base from './Forms/Form'\nimport FormField from './Forms/FormField'\nimport FormButton from './Forms/FormButton'\nimport FormErrorMessage from './Forms/FormErrorMessage'\nimport FormSwitch from './Forms/FormSwitch'\n\nconst Form = (props) => Base(props)\n\nForm.Field = FormField\nForm.Button = FormButton\nForm.ErrorMessage = FormErrorMessage\nForm.Switch = FormSwitch\n\nexport default Form\n","import React from 'react'\nimport { Formik } from 'formik'\n\nexport default function Form({\n  children,\n  initialValues,\n  onSubmit,\n  validationSchema,\n}) {\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {() => <React.Fragment>{children}</React.Fragment>}\n    </Formik>\n  )\n}\n","import React from 'react'\nimport { useFormikContext } from 'formik'\n\nimport FormErrorMessage from './FormErrorMessage'\nimport FormTextInput from './FormTextInput'\n\nexport default function FormField({ name, width, ...otherProps }) {\n  const {\n    setFieldTouched,\n    setFieldValue,\n    values,\n    errors,\n    touched,\n  } = useFormikContext()\n\n  return (\n    <React.Fragment>\n      <FormTextInput\n        value={values[name]}\n        onChangeText={(text) => setFieldValue(name, text)}\n        onBlur={() => setFieldTouched(name)}\n        width={width}\n        {...otherProps}\n      />\n      <FormErrorMessage error={errors[name]} visible={touched[name]} />\n    </React.Fragment>\n  )\n}\n","import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCfQWvGnwih9JFpyL0ypAswUMSdEyD8AdE\",\n    authDomain: \"myelinapp-513fb.firebaseapp.com\",\n    databaseURL: \"https://myelinapp-513fb-default-rtdb.firebaseio.com\",\n    projectId: \"myelinapp-513fb\",\n    storageBucket: \"myelinapp-513fb.appspot.com\",\n    messagingSenderId: \"936159143445\",\n    appId: \"1:936159143445:web:2b03711a46dc9022f9501c\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport { firebase };","import React, { useState } from 'react'\nimport { SafeAreaView, StyleSheet, Text, TouchableOpacity } from 'react-native'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport Form from '../components/Form'\nimport {firebase} from '../firebase'\n\nconst CreateTaskScreen = ({ navigation, route }) => {\n  const [submitted, setSubmitted] = useState(false)\n  //const [newTask, setNewTask] = useState({}) // Keep track of new task\n\n\n  // const CourseEditScreen = ({ navigation, route }) => {\n  //   const course = route.params.course;\n  //   const [submitError, setSubmitError] = useState('');\n\n  const userId = route.params.userId\n  const name = route.params.name\n  const detail = route.params.detail\n\n  // Update the 'newTask' variable based on user input\n    async function handleSubmit(values) {\n    const { title, description, dateDue } = values;\n    const newTask = {\n      title,\n      description,\n      dateCreated: Date(),\n      dateDue,\n      status: 'Incomplete',\n      owner: userId,\n      comments: '',\n      notifications: '',\n    }\n      firebase.database().ref('users').child(userId).child('tasks').child(Date.now()).set(newTask).catch(error => {\n        console.log(error.message);\n      });\n  }\n\n  return !submitted ? (\n    <SafeAreaView style={styles.container}>\n      <Text label=\"Name\" style={styles.name}>\n        Post a new task!\n      </Text>\n      <ScrollView>\n        <Form\n          initialValues={{\n            title: name,\n            description: detail,\n            dateCreated: '',\n            dateDue: '',\n            status: 'Incomplete',\n            owner: '',\n            comments: '',\n            notifications: '',\n            resources:'',\n          }}\n          onSubmit={(values) => {\n            setSubmitted(true);\n            handleSubmit(values);\n          }}\n        >\n          <Form.Field\n            name=\"title\"\n            placeholder=\"Enter task name\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"description\"\n            placeholder=\"Enter task description\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"dateDue\"\n            placeholder=\"Enter due date for this task\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Button title={'Add new task'} />\n        </Form>\n      </ScrollView>\n    </SafeAreaView>\n  ) : (\n    <SafeAreaView style={styles.container}>\n      <Text style={styles.h1_text}>Task successfully created!</Text>\n      <TouchableOpacity\n        style={styles.addTaskButton}\n        onPress={() => navigation.navigate('MainTasksScreen')} // Pass new task to 'MainTasksScreen.js'\n      >\n        <Text style={styles.buttonText}>Return to Home Screen</Text>\n      </TouchableOpacity>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  addTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset:{ width: 2,  height: 2, },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  container: {\n    flex: 1,\n    marginTop: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: '90%',\n  },\n  h1_text: {\n    fontSize: 48,\n    marginBottom: 25,\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  field: {\n    padding: 5,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 18,\n  },\n  fieldContainer: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  label: {\n    fontWeight: 'bold',\n  },\n  name: {\n    fontSize: 24,\n    marginBottom: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  connectButton: {\n    margin: 30,\n    padding: 10,\n    textAlign: 'center',\n    backgroundColor: 'lightblue',\n  },\n  connectText: {\n    fontSize: 22,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    // fontWeight: 500,\n  },\n  roleButton: {\n    backgroundColor: '#2196F3',\n    fontSize: 16,\n    width: 250,\n    padding: 15,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'black',\n    textAlign: 'center',\n  }\n})\n\nexport default CreateTaskScreen\n","import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native'\n\n// TODO (L11): conditional styling?\n\nconst UserProfile = ({ user, view }) => (\n  <TouchableOpacity style={{ height: 60 }} onPress={() => view(user)}>\n    <View style={styles.container}>\n      <Text style={styles.title}>{user.patientInfo.name}</Text>\n    </View>\n  </TouchableOpacity>\n)\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    marginTop: 20,\n    paddingTop: 5,\n    paddingBottom: 5,\n    //paddingLeft: 10,\n    //paddingRight: 75,\n    width: '100%',\n    height: '10%',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 5,\n  },\n  title: {\n    ...row,\n    fontWeight: \"500\",\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n})\n\nexport default UserProfile\n","import React, { useState, useEffect } from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity, Button } from 'react-native'\nimport { users } from '../utils/data'\nimport TaskList from '../components/TaskList'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\nimport UserProfile from '../components/UserProfile'\nimport { firebase } from '../firebase'\n\n\nconst ViewPatientsScreen = ({ navigation, route }) => {\n  const view = (user) => {\n    navigation.navigate('MainTasksScreen', {user : user})\n  }\n\n  const [userList, setUserList] = useState([]);\n\n  useEffect(() => {\n    const db = firebase.database().ref()\n    const handleData = (snap) => {\n      if (snap.val()) {\n        const val = snap.val()\n        setUserList(Object.keys(val.users).map((key) => val.users[key]))\n      }\n    }\n    db.on('value', handleData, (error) => console.log(error))\n    return () => db.off('value', handleData)\n  }, [])\n\n\n  return (\n    <View style={styles.container}>\n      {userList.map((user, idx) => (\n        <UserProfile key={idx} user={user} view={view}/>\n      ))}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset:{width: 2,  height: 2},\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default ViewPatientsScreen\n","export const PrebuiltTaskArray = {\n\n  tasks : [\n    {\n      name:\"I need a Handicap Vehicle Permit\",\n      detail: \"Please order or renew handicap vehicle permit.\",\n\n    },\n    {\n      name:\"I need a new blood glucose meter\",\n      detail: \"Please send a prescription for a new glucometer.\",\n\n    },\n    {\n      name:\"What is the best diet for me?\",\n      detail: \"Please give me information on the most appropriate diet for me.\",\n\n    },\n    {\n      name:\"I need help trimming my toenails.\",\n      detail: \"Please schedule me an appointment with podiatry.\",\n\n    },\n    {\n      name:\"What can I take for my seasonal allergies?\",\n      detail: \"Please send me a list of over-the-counter medications that are safe for me to take.\",\n\n    }\n  ]\n\n}\n\n","import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native'\n\nconst PrebuiltTask = ({ prebuiltTask, view }) => (\n  <TouchableOpacity style={{ height: 60 }} onPress={() => view(prebuiltTask)}>\n    <View style={styles.container}>\n      <Text style={styles.title}>{prebuiltTask.name}</Text>\n    </View>\n  </TouchableOpacity>\n)\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    backgroundColor: '#fff',\n    alignItems: 'flex-start',\n    marginTop: 20,\n    paddingTop: 5,\n    paddingBottom: 5,\n    width: '100%',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 5,\n  },\n  title: {\n    ...row,\n    fontWeight: \"500\",\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n})\n\nexport default PrebuiltTask\n","import React from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity, Button } from 'react-native'\nimport {PrebuiltTaskArray} from '../utils/dataTask'\nimport PrebuiltTask from '../components/PrebuiltTask'\n\nconst PrebuiltTaskScreen = ({ navigation, route }) => {\n  let name\n  let detail\n\n  const view = (prebuiltTask) => {\n    name = prebuiltTask.name\n    detail = prebuiltTask.detail\n    navigation.navigate('CreateTaskScreen', {userId, name, detail})\n  }\n\n  const userId = route.params.userId\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => {\n            name = \"\"\n            detail = \"\"\n            return navigation.navigate('CreateTaskScreen', {userId, name, detail})\n        }}\n        style={styles.newTaskButton}\n      >\n        <Text style={styles.title}>Create Blank Task</Text>\n      </TouchableOpacity>\n      <View style={styles.container}>\n        {PrebuiltTaskArray.tasks.map((prebuiltTask, idx) => (\n            <PrebuiltTask key={idx} prebuiltTask={prebuiltTask} view={view}/>\n        ))}\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset:{width: 2,  height: 2},\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default PrebuiltTaskScreen","import React, { useState } from 'react'\nimport { SafeAreaView, StyleSheet, Text, TouchableOpacity } from 'react-native'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport Form from '../components/Form'\nimport {firebase} from '../firebase'\n\nconst EditTaskScreen = ({ navigation, route }) => {\n  const task = route.params.task\n  const userId = route.params.userId\n\n  // Update the 'newTask' variable based on user input\n    async function handleSubmit(values) {\n    const { title, description, dateDue } = values;\n    const newTask = {\n      title,\n      description,\n      dateCreated: Date(),\n      dateDue,\n      status: 'Incomplete',\n      owner: userId,\n      comments: '',\n      notifications: '',\n    }\n    \n    firebase.database().ref('users').child(userId).child('tasks').child(task.id).set(newTask).catch(error => {\n      console.log(error.message);\n    });\n\n    navigation.navigate('TaskDetailScreen', {task: newTask, userId})\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text label=\"Name\" style={styles.name}>\n        Task Edit Screen\n      </Text>\n      <ScrollView>\n        <Form\n          initialValues={{\n            title: task.title,\n            description: task.description,\n            dateCreated: '',\n            dateDue: task.dateDue,\n            status: 'Incomplete',\n            owner: '',\n            comments: '',\n            notifications: '',\n            resources:'',\n          }}\n          onSubmit={(values) => {\n            handleSubmit(values);\n          }}\n        >\n          <Form.Field\n            name=\"title\"\n            placeholder=\"Enter task name\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"description\"\n            placeholder=\"Enter task description\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"dateDue\"\n            placeholder=\"Enter due date for this task\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Button title={'Save changes'} />\n        </Form>\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  addTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset:{ width: 2,  height: 2, },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  container: {\n    flex: 1,\n    marginTop: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: '90%',\n  },\n  h1_text: {\n    fontSize: 48,\n    marginBottom: 25,\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  field: {\n    padding: 5,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 18,\n  },\n  fieldContainer: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  label: {\n    fontWeight: 'bold',\n  },\n  name: {\n    fontSize: 24,\n    marginBottom: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  connectButton: {\n    margin: 30,\n    padding: 10,\n    textAlign: 'center',\n    backgroundColor: 'lightblue',\n  },\n  connectText: {\n    fontSize: 22,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    // fontWeight: 500,\n  },\n  roleButton: {\n    backgroundColor: '#2196F3',\n    fontSize: 16,\n    width: 250,\n    padding: 15,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'black',\n    textAlign: 'center',\n  }\n})\n\nexport default EditTaskScreen\n","import React from 'react'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { StyleSheet } from 'react-native'\nimport { NavigationContainer } from '@react-navigation/native'\nimport MainTasksScreen from './screens/MainTasksScreen'\nimport TaskDetailScreen from './screens/TaskDetailScreen'\nimport CreateTaskScreen from './screens/CreateTaskScreen'\nimport ViewPatientsScreen from './screens/ViewPatientsScreen'\nimport PrebuiltTaskScreen from './screens/PrebuiltTaskScreen'\nimport EditTaskScreen from './screens/EditTaskScreen'\n\n\nconst Stack = createStackNavigator()\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n\n      <Stack.Navigator\n        screenOptions={{\n          headerStyle: {\n            backgroundColor: '#610f94', // some purple color lol\n          },\n          headerTintColor: 'white',\n          headerTitleStyle: {\n            alignSelf: 'center',\n            fontWeight: 'bold',\n          },\n          headerTitleContainerStyle: {\n            left: 0,\n          },\n        }}\n      >\n        <Stack.Screen\n          name=\"ViewPatientsScreen\"\n          component={ViewPatientsScreen}\n          options={{ title: 'Your Patients' }}\n        />  \n        <Stack.Screen\n          name=\"MainTasksScreen\"\n          component={MainTasksScreen}\n          options={{ title: 'Main Tasks' }}\n        />\n        <Stack.Screen\n          name=\"PrebuiltTaskScreen\"\n          component={PrebuiltTaskScreen}\n          options={{ title: 'Choose from Pre-Created Tasks' }}\n        />\n        <Stack.Screen\n          name=\"CreateTaskScreen\"\n          component={CreateTaskScreen}\n          options={{ title: 'Create New Task' }}\n        />\n        <Stack.Screen\n          name=\"TaskDetailScreen\"\n          component={TaskDetailScreen}\n          options={{ title: 'Task Details' }}\n        />\n        <Stack.Screen\n          name=\"EditTaskScreen\"\n          component={EditTaskScreen}\n          options={{ title: 'Edit Task' }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n"],"sourceRoot":""}