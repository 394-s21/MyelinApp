{"version":3,"sources":["components/Task.js","components/TaskList.js","firebase.js","screens/MainTasksScreen.js","screens/TaskDetailScreen.js","components/Forms/colors.js","components/Forms/FormErrorMessage.js","components/Forms/FormTextInput.js","components/Forms/FormButton.js","components/Forms/FormSwitch.js","components/Form.js","components/Forms/Form.js","components/Forms/FormField.js","screens/CreateTaskScreen.js","components/UserProfile.js","screens/ViewPatientsScreen.js","utils/dataTask.js","components/PrebuiltTask.js","screens/PrebuiltTaskScreen.js","screens/EditTaskScreen.js","App.js"],"names":["row","fontSize","marginLeft","marginRight","styles","StyleSheet","create","container","display","flexDirection","backgroundColor","alignItems","marginTop","paddingTop","paddingBottom","width","borderWidth","borderColor","borderRadius","title","fontWeight","dateDue","fontStyle","incompleteStatus","color","completeStatus","urgencyStatus","urgencyView","flex","textView","Task","task","view","TouchableOpacity","onPress","View","style","Text","status","urgency","maxWidth","TaskList","tasks","ScrollView","map","idx","key","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","justifyContent","newTaskButton","textAlign","padding","shadowOffset","height","shadowColor","shadowOpacity","MainTasksScreen","navigation","userId","route","params","user","id","useState","thisUser","setThisUser","useEffect","db","database","ref","handleData","snap","val","patient","taskArray","Object","keys","push","taskList","fixPatientTasks","on","error","console","log","off","navigate","statusContainer","paddingLeft","paddingRight","marginBottom","description","resource","textDecorationLine","date","owner","TaskDetailScreen","dateCreated","resources","Linking","openURL","Button","primary","secondary","black","white","ghostWhite","lightGrey","mediumGrey","red","lightPurple","FormErrorMessage","visible","errorText","Colors","FormTextInput","leftIcon","rightIcon","handlePasswordVisibility","otherProps","MaterialCommunityIcons","name","size","icon","TextInput","input","placeholderTextColor","rightIconStyles","marginVertical","alignSelf","button","buttonText","textTransform","Form","props","children","initialValues","onSubmit","validationSchema","Fragment","Base","Field","useFormikContext","setFieldTouched","setFieldValue","values","errors","touched","value","onChangeText","text","onBlur","handleSubmit","ErrorMessage","Switch","onChange","x","onValueChange","addTaskButton","h1_text","field","fieldContainer","label","connectButton","margin","connectText","roleButton","CreateTaskScreen","submitted","setSubmitted","detail","SafeAreaView","comments","notifications","a","async","newTask","Date","child","now","set","catch","message","placeholder","autoCapitalize","UserProfile","patientInfo","ViewPatientsScreen","userList","setUserList","users","PrebuiltTaskArray","PrebuiltTask","prebuiltTask","PrebuiltTaskScreen","EditTaskScreen","submitError","setSubmitError","dateModified","Stack","createStackNavigator","App","NavigationContainer","Navigator","screenOptions","headerStyle","headerTintColor","headerTitleStyle","headerTitleContainerStyle","left","Screen","component","options"],"mappings":"uyBAKA,IAmBMA,EAAM,CACVC,SAAU,GACVC,WAAY,GACZC,YAAa,IAGTC,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,QAAS,OACTC,cAAe,MACfC,gBAAiB,OACjBC,WAAY,aACZC,UAAW,GACXC,WAAY,EACZC,cAAe,EACfC,MAAO,OACPC,YAAa,EACbC,YAAa,QACbC,aAAc,GAEhBC,MAAM,EAAD,KACAnB,GADA,IAEHoB,WAAY,QAEdC,QAAQ,EAAD,KACFrB,GADE,IAELsB,UAAW,WAEbC,iBAAiB,EAAD,KACXvB,GADW,IAEdwB,MAAO,QAETC,eAAe,EAAD,KACTzB,GADS,IAEZwB,MAAO,UAETE,cAAc,EAAD,KACR1B,GADQ,IAEXwB,MAAO,MACPvB,SAAU,KAEZ0B,YAAY,EAAD,KACN3B,GADM,IAET4B,KAAM,EACNpB,QAAS,OACTC,cAAe,SACfE,WAAY,aAEdkB,SAAS,EAAD,KACH7B,GADG,IAEN4B,KAAM,EACNpB,QAAS,OACTC,cAAe,SACfM,MAAO,MACPS,MAAO,UAIIM,EA7EF,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACpB,OACE,kBAACC,EAAA,EAAD,CAAkBC,QAAS,kBAAMF,EAAKD,KACpC,kBAACI,EAAA,EAAD,CAAMC,MAAOhC,EAAOG,WAClB,kBAAC4B,EAAA,EAAD,CAAMC,MAAOhC,EAAOyB,UAClB,kBAACQ,EAAA,EAAD,CAAMD,MAAOhC,EAAOe,OAAQY,EAAKZ,OACjC,kBAACkB,EAAA,EAAD,CAAMD,MAAOhC,EAAOiB,SAApB,QAAmCU,EAAKV,SACxC,kBAACgB,EAAA,EAAD,CAAMD,MAAOhC,EAAOmB,kBAApB,WAA+CQ,EAAKO,SAEtD,kBAACH,EAAA,EAAD,CAAMC,MAAOhC,EAAOuB,aAClB,kBAACU,EAAA,EAAD,CAAMD,MAAOhC,EAAOsB,eACA,IAAjBK,EAAKQ,QAAgB,eAAO,GAAI,SCJvCnC,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTQ,MAAO,MACPyB,SAAU,OAICC,EAfE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOV,EAAV,EAAUA,KAAV,OACf,kBAACW,EAAA,EAAD,CAAYP,MAAOhC,EAAOG,WACvBmC,EAAME,KAAI,SAACb,EAAMc,GAAP,OACT,kBAAC,EAAD,CAAMC,IAAKD,EAAKd,KAAMA,EAAMC,KAAMA,S,ilBCMxCe,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,sDACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CCLX,IAiDMnD,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTqB,KAAM,EACNjB,WAAY,SACZ6C,eAAgB,SAChB5C,UAAW,IAEb6C,cAAe,CACbzC,YAAa,EACbE,aAAc,EACdD,YAAa,QACbP,gBAAiB,UACjBK,MAAO,MACP2C,UAAW,SACXC,QAAS,EACTnB,SAAU,IACVoB,aAAc,CAAE7C,MAAO,EAAG8C,OAAQ,GAClCC,YAAa,QACbC,cAAe,GAEjB5C,MAAO,CACLlB,SAAU,MAIC+D,EA7DS,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,WACnBC,EAD2C,EAAZC,MAChBC,OAAOC,KAAKC,GACjC,EAAgCC,mBAAS,MAAzC,WAAOC,EAAP,KAAiBC,EAAjB,KAiBA,OAXAC,qBAAU,WACR,IAAMC,EAAK5B,IAAS6B,WAAWC,IAApB,SAAiCX,GACtCY,EAAa,SAACC,GACdA,EAAKC,OAAOP,EAxBE,SAACQ,GACvB,IAAMC,EAAY,GAMlB,OALAC,OAAOC,KAAKH,EAAQvC,OAAOE,KAAI,SAACE,GAC9B,IAAMf,EAAOkD,EAAQvC,MAAMI,GAC3Bf,EAAI,GAASe,EACboC,EAAUG,KAAKtD,MAEV,OACFkD,GADL,IAEEK,SAAUJ,IAeoBK,CAAgBR,EAAKC,SAGnD,OADAL,EAAGa,GAAG,QAASV,GAAY,SAACW,GAAD,OAAWC,QAAQC,IAAIF,MAC3C,WACLd,EAAGiB,IAAI,QAASd,MAEjB,IAEIN,EACL,kBAACrC,EAAA,EAAD,CAAMC,MAAOhC,EAAOG,WAClB,kBAAC0B,EAAA,EAAD,CACEC,QAAS,kBAAM+B,EAAW4B,SAAS,qBAAsB,CAAErB,cAC3DpC,MAAOhC,EAAOqD,eAEd,kBAACpB,EAAA,EAAD,CAAMD,MAAOhC,EAAOe,OAApB,oBAEF,kBAAC,EAAD,CAAUuB,MAAO8B,EAASc,SAAUtD,KAvB3B,SAACD,GACZkC,EAAW4B,SAAS,mBAAoB,CAAE9D,OAAMyC,iBAyBhD,kBAACrC,EAAA,EAAD,CAAMC,MAAOhC,EAAOG,WAClB,kBAAC8B,EAAA,EAAD,qB,kBCXAjC,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTqB,KAAM,EACNjB,WAAY,SACZC,UAAW,IAEbkF,gBAAiB,CACfpF,gBAAiB,QACjBG,WAAY,GACZC,cAAe,GACfiF,YAAa,GACbC,aAAc,GACdhF,YAAa,EACbC,YAAa,QACbgF,aAAc,IAEhB9E,MAAO,CACLlB,SAAU,GACVmB,WAAY,OAEd8E,YAAa,CACXjG,SAAU,GACVgG,aAAc,IAEhBE,SAAU,CACRlG,SAAU,GACVgG,aAAc,GACdzE,MAAO,OACP4E,mBAAoB,aAEtBC,KAAM,CACJpG,SAAU,GACVqB,UAAW,SACX2E,aAAc,GAEhB1E,iBAAkB,CAChBtB,SAAU,GACVmB,WAAY,OACZI,MAAO,OAETC,eAAgB,CACdxB,SAAU,GACVmB,WAAY,OACZI,MAAO,SAET8E,MAAO,CACLL,aAAc,MAIHM,EArFU,SAAC,GAA2B,IAAzBtC,EAAwB,EAAxBA,WAAYE,EAAY,EAAZA,MAChCpC,EAAOoC,EAAMC,OAAOrC,KACpByC,EAAWL,EAAMC,OAAOI,SAG9B,OACE,kBAACrC,EAAA,EAAD,CAAMC,MAAOhC,EAAOG,WAClB,kBAAC8B,EAAA,EAAD,CAAMD,MAAOhC,EAAOe,OAAQY,EAAKZ,OACjC,kBAACkB,EAAA,EAAD,CAAMD,MAAOhC,EAAOiG,MAApB,YACYtE,EAAKyE,YADjB,WACsCzE,EAAKV,SAE3C,kBAACgB,EAAA,EAAD,CAAMD,MAAOhC,EAAOkG,OAApB,KAA8BvE,EAAKuE,MAAnC,MACA,kBAACjE,EAAA,EAAD,CAAMD,MAAOhC,EAAO8F,aAAcnE,EAAKmE,aACpB,IAAlBnE,EAAK0E,WACJ,kBAACpE,EAAA,EAAD,CACED,MAAOhC,EAAO+F,SACdjE,QAAS,kBAAMwE,IAAQC,QAAQ5E,EAAK0E,aAEnC1E,EAAK0E,WAIV,kBAACtE,EAAA,EAAD,CAAMC,MAAOhC,EAAO0F,iBAClB,kBAACzD,EAAA,EAAD,CAAMD,MAAOhC,EAAOmB,kBAAmBQ,EAAKO,SAE9C,kBAACsE,EAAA,EAAD,CACEzF,MAAM,YACNe,QAAS,kBACP+B,EAAW4B,SAAS,iBAAkB,CAAE9D,OAAMyC,kB,gFC/BzC,GACbqC,QAAS,YACTC,UAAW,UACXC,MAAO,UACPC,MAAO,UACPC,WAAY,UACZC,UAAW,UACXC,WAAY,UACZC,IAAK,UACLC,YAAa,WCJA,SAASC,EAAT,GAA+C,IAAnB7B,EAAkB,EAAlBA,MAAO8B,EAAW,EAAXA,QAChD,OAAK9B,GAAU8B,EAIR,kBAAClF,EAAA,EAAD,CAAMD,MAAOhC,EAAOoH,WAAY/B,GAH9B,KAMX,IAAMrF,EAASC,IAAWC,OAAO,CAC/BkH,UAAW,CACTtH,WAAY,GACZsB,MAAOiG,EAAOL,IACdnH,SAAU,GACVgG,aAAc,EACd7E,WAAY,S,iBCbD,SAASsG,EAAT,GAMX,IALFC,EAKC,EALDA,SAKC,IAJD5G,aAIC,MAJO,OAIP,EAHD6G,EAGC,EAHDA,UACAC,EAEC,EAFDA,yBACGC,EACF,mEACD,OACE,kBAAC3F,EAAA,EAAD,CAAMC,MAAO,CAAChC,EAAOG,UAAW,CAAEQ,WAC/B4G,GACC,kBAACI,EAAA,EAAD,CACEC,KAAML,EACNM,KAAM,GACNzG,MAAOiG,EAAON,WACd/E,MAAOhC,EAAO8H,OAGlB,kBAACC,EAAA,EAAD,KACE/F,MAAOhC,EAAOgI,MACdC,qBAAsBZ,EAAON,YACzBW,IAELF,GACC,kBAAC3F,EAAA,EAAD,CAAkBC,QAAS2F,GACzB,kBAACE,EAAA,EAAD,CACEC,KAAMJ,EACNK,KAAM,GACNzG,MAAOiG,EAAON,WACd/E,MAAOhC,EAAOkI,oBAQ1B,IAAMlI,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTG,gBAAiB+G,EAAOP,UACxBhG,aAAc,GACdT,cAAe,MACf+C,eAAgB,SAChBG,QAAS,GACT4E,eAAgB,IAElBL,KAAM,CACJ/H,YAAa,IAEfiI,MAAO,CACLxG,KAAM,EACNb,MAAO,OACPd,SAAU,GACVuB,MAAOiG,EAAOV,OAEhBuB,gBAAiB,CACfE,UAAW,SACXtI,WAAY,MCpChB,IAAME,EAASC,IAAWC,OAAO,CAC/BmI,OAAQ,CACNzH,YAAa,EACbE,aAAc,EACdD,YAAa,QACbyC,UAAW,SACXC,QAAS,EACTC,aAAc,CAAE7C,MAAO,EAAG8C,OAAQ,GAClCC,YAAa,QACbC,cAAe,GAEjB2E,WAAY,CACVlH,MAAOiG,EAAOV,MACd9G,SAAU,GACVmB,WAAY,MACZuH,cAAe,e,SCZnB,IAAMvI,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTqB,KAAM,EACN4B,eAAgB,SAChB7C,WAAY,SACZF,cAAe,OAEjBU,MAAO,CACLK,MAAOiG,EAAOT,MACd/G,SAAU,GACVmB,WAAY,MACZjB,YAAa,KClCXyI,EAAO,SAACC,GAAD,OCHE,YAKX,IAJFC,EAIC,EAJDA,SACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,SACAC,EACC,EADDA,iBAEA,OACE,kBAAC,IAAD,CACEF,cAAeA,EACfE,iBAAkBA,EAClBD,SAAUA,IAET,kBAAM,kBAAC,IAAME,SAAP,KAAiBJ,MDTNK,CAAKN,IAE7BD,EAAKQ,MEFU,YAAoD,IAA/BpB,EAA8B,EAA9BA,KAAMjH,EAAwB,EAAxBA,MAAU+G,EAAc,wBAChE,EACEuB,cADMC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,cAAeC,EAAxC,EAAwCA,OAAQC,EAAhD,EAAgDA,OAAQC,EAAxD,EAAwDA,QAGxD,OACE,kBAAC,IAAMR,SAAP,KACE,kBAACxB,EAAD,KACEiC,MAAOH,EAAOxB,GACd4B,aAAc,SAACC,GAAD,OAAUN,EAAcvB,EAAM6B,IAC5CC,OAAQ,kBAAMR,EAAgBtB,IAC9BjH,MAAOA,GACH+G,IAEN,kBAACR,EAAD,CAAkB7B,MAAOgE,EAAOzB,GAAOT,QAASmC,EAAQ1B,OFV9DY,EAAKhC,OFHU,YAAgE,IAA1CzF,EAAyC,EAAzCA,MAAOe,EAAkC,EAAlCA,QAAkC,IAAzBV,aAAyB,MAAjB,cAAiB,EAC5E,EAAiC6H,cAAzBU,EAAR,EAAQA,aAAcP,EAAtB,EAAsBA,OAOhBK,EAAwB,oBAAV1I,EAAuBA,EAAMqI,GAAUrI,EAE3D,OACE,kBAACc,EAAA,EAAD,CACEG,MAAO,CAAChC,EAAOqI,OAAQ,CAAE/H,gBAAiB+G,EAAOjG,KACjDU,QAXqB,WACnBA,GACFA,IAEF6H,MASE,kBAAC1H,EAAA,EAAD,CAAMD,MAAOhC,EAAOsI,YAAamB,KEXvCjB,EAAKoB,aAAe1C,EACpBsB,EAAKqB,ODLU,YAKX,IAJFjC,EAIC,EAJDA,KACA7G,EAGC,EAHDA,MAGC,IAFD+I,gBAEC,MAFU,SAACC,GAAD,OAAOA,GAEjB,EADErC,EACF,mCACD,EAAkCuB,cAA1BG,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,cACVI,EAAQH,EAAOxB,GACrB,OACE,kBAAC7F,EAAA,EAAD,CAAMC,MAAOhC,EAAOG,WAClB,kBAAC8B,EAAA,EAAD,CAAMD,MAAOhC,EAAOe,OAAQA,GAC5B,kBAAC8I,EAAA,EAAD,KACEN,MAAOA,EACPS,cAAe,SAACT,GACdO,EAASP,GACTJ,EAAcvB,EAAM2B,KAElB7B,MCVGc,QGsFTxI,EAASC,IAAWC,OAAO,CAC/B+J,cAAe,CACbrJ,YAAa,EACbE,aAAc,EACdD,YAAa,QACbP,gBAAiB,UACjBgD,UAAW,SACXC,QAAS,EACTC,aAAc,CAAE7C,MAAO,EAAG8C,OAAQ,GAClCC,YAAa,QACbC,cAAe,GAEjBxD,UAAW,CACTqB,KAAM,EACNhB,UAAW,GACXV,WAAY,OACZC,YAAa,OACbY,MAAO,OAETuJ,QAAS,CACPrK,SAAU,GACVgG,aAAc,GACdzC,eAAgB,SAChBE,UAAW,UAEb6G,MAAO,CACL5G,QAAS,EACTjD,gBAAiB,QACjBQ,aAAc,EACdjB,SAAU,IAEZuK,eAAgB,CACd5J,UAAW,GACXqF,aAAc,IAEhBwE,MAAO,CACLrJ,WAAY,QAEd4G,KAAM,CACJ/H,SAAU,GACVgG,aAAc,GACd/F,WAAY,OACZC,YAAa,QAEfuK,cAAe,CACbC,OAAQ,GACRhH,QAAS,GACTD,UAAW,SACXhD,gBAAiB,aAEnBkK,YAAa,CACX3K,SAAU,GACVC,WAAY,OACZC,YAAa,QAGf0K,WAAY,CACVnK,gBAAiB,UACjBT,SAAU,GACVc,MAAO,IACP4C,QAAS,GACTzD,WAAY,OACZC,YAAa,OACbqD,eAAgB,SAChBE,UAAW,UAEbgF,WAAY,CACVzI,SAAU,GACVuB,MAAO,QACPkC,UAAW,YAIAoH,GAtKU,SAAC,GAA2B,IAAzB7G,EAAwB,EAAxBA,WAAYE,EAAY,EAAZA,MACtC,EAAkCI,oBAAS,GAA3C,WAAOwG,EAAP,KAAkBC,EAAlB,KAOMxG,EAAWL,EAAMC,OAAOI,SACxBN,EAASM,EAASF,GAClB0D,EAAO7D,EAAMC,OAAO4D,KACpBiD,EAAS9G,EAAMC,OAAO6G,OA2B5B,OAAQF,EA2CN,kBAACG,EAAA,EAAD,CAAc9I,MAAOhC,EAAOG,WAC1B,kBAAC8B,EAAA,EAAD,CAAMD,MAAOhC,EAAOkK,SAApB,8BACA,kBAACrI,EAAA,EAAD,CACEG,MAAOhC,EAAOiK,cACdnI,QAAS,kBAAM+B,EAAW4B,SAAS,kBAAmB,CAAErB,eAExD,kBAACnC,EAAA,EAAD,CAAMD,MAAOhC,EAAOsI,YAApB,2BAhDJ,kBAACwC,EAAA,EAAD,CAAc9I,MAAOhC,EAAOG,WAC1B,kBAAC8B,EAAA,EAAD,CAAMoI,MAAM,OAAOrI,MAAOhC,EAAO4H,MAAjC,oBAGA,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEe,cAAe,CACb5H,MAAO6G,EACP9B,YAAa+E,EACbzE,YAAa,GACbnF,QAAS,GACTiB,OAAQ,aACRgE,MAAO,GACP6E,SAAU,GACVC,cAAe,GACf3E,UAAW,IAEbuC,SAAU,SAACQ,GACTwB,GAAa,GA3CvB,SAA4BxB,GAA5B,cAAA6B,EAAAC,OAAA,gDACUnK,EAAgCqI,EAAhCrI,MAAO+E,EAAyBsD,EAAzBtD,YAAa7E,EAAYmI,EAAZnI,QACtBkK,EAAU,CACdpK,QACA+E,cACAM,YAAagF,OACbnK,UACAiB,OAAQ,aACRgE,MAAOpC,EACPiH,SAAU,GACVC,cAAe,IAEjBrI,IACG6B,WACAC,IAAI,SACJ4G,MAAMvH,GACNuH,MAAM,SACNA,MAAMD,KAAKE,OACXC,IAAIJ,GACJK,OAAM,SAACnG,GACNC,QAAQC,IAAIF,EAAMoG,YApBxB,4DA4CU9B,CAAaP,KAGf,kBAAC,EAAKJ,MAAN,CACEpB,KAAK,QACL8D,YAAY,kBACZC,eAAe,SAEjB,kBAAC,EAAK3C,MAAN,CACEpB,KAAK,cACL8D,YAAY,yBACZC,eAAe,SAEjB,kBAAC,EAAK3C,MAAN,CACEpB,KAAK,UACL8D,YAAY,+BACZC,eAAe,SAEjB,kBAAC,EAAKnF,OAAN,CAAazF,MAAO,qB,qkBC7E9B,IAQMnB,GAAM,CACVC,SAAU,GACVC,WAAY,GACZC,YAAa,IAGTC,GAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTqB,KAAM,EACNlB,gBAAiB,OACjBC,WAAY,aACZ6C,eAAgB,SAChB5C,UAAW,GACXC,WAAY,EACZC,cAAe,EAGfC,MAAO,OACP8C,OAAQ,MACR7C,YAAa,EACbC,YAAa,QACbC,aAAc,GAEhBC,MAAM,SACDnB,IADA,IAEHoB,WAAY,QAEdC,QAAQ,SACHrB,IADE,IAELsB,UAAW,WAEbC,iBAAiB,SACZvB,IADW,IAEdwB,MAAO,QAETC,eAAe,SACVzB,IADS,IAEZwB,MAAO,YAIIwK,GAjDK,SAAC,GAAD,IAAG3H,EAAH,EAAGA,KAAMrC,EAAT,EAASA,KAAT,OAClB,kBAACC,EAAA,EAAD,CAAkBG,MAAO,CAAEyB,OAAQ,IAAM3B,QAAS,kBAAMF,EAAKqC,KAC3D,kBAAClC,EAAA,EAAD,CAAMC,MAAOhC,GAAOG,WAClB,kBAAC8B,EAAA,EAAD,CAAMD,MAAOhC,GAAOe,OAAQkD,EAAK4H,YAAYjE,SCyB7C5H,GAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTqB,KAAM,EACNjB,WAAY,SACZC,UAAW,IAEb6C,cAAe,CACbzC,YAAa,EACbE,aAAc,EACdD,YAAa,QACbP,gBAAiB,UACjBK,MAAO,MACP2C,UAAW,SACXC,QAAS,EACTnB,SAAU,IACVoB,aAAc,CAAE7C,MAAO,EAAG8C,OAAQ,GAClCC,YAAa,QACbC,cAAe,GAEjB5C,MAAO,CACLlB,SAAU,MAICiM,GApDY,SAAC,GAAoB,IAAlBjI,EAAiB,EAAjBA,WACtBjC,EAAO,SAACqC,GACZJ,EAAW4B,SAAS,kBAAmB,CAAExB,KAAMA,KAGjD,EAAgCE,mBAAS,IAAzC,WAAO4H,EAAP,KAAiBC,EAAjB,KAcA,OAZA1H,qBAAU,WACR,IAAMC,EAAK5B,IAAS6B,WAAWC,IAAI,SAC7BC,EAAa,SAACC,GAClB,GAAIA,EAAKC,MAAO,CACd,IAAMqH,EAAQtH,EAAKC,MACnBoH,EAAYjH,OAAOC,KAAKiH,GAAOzJ,KAAI,SAACE,GAAD,OAASuJ,EAAMvJ,SAItD,OADA6B,EAAGa,GAAG,QAASV,GAAY,SAACW,GAAD,OAAWC,QAAQC,IAAIF,MAC3C,kBAAMd,EAAGiB,IAAI,QAASd,MAC5B,IAGD,kBAAC3C,EAAA,EAAD,CAAMC,MAAOhC,GAAOG,WACjB4L,EAASvJ,KAAI,SAACyB,EAAMxB,GAAP,OACZ,kBAAC,GAAD,CAAaC,IAAKD,EAAKwB,KAAMA,EAAMrC,KAAMA,SC3BpCsK,GAAoB,CAC/B5J,MAAO,CACL,CACEsF,KAAM,mCACNiD,OAAQ,kDAEV,CACEjD,KAAM,mCACNiD,OAAQ,oDAEV,CACEjD,KAAM,gCACNiD,OAAQ,mEAEV,CACEjD,KAAM,oCACNiD,OAAQ,oDAEV,CACEjD,KAAM,6CACNiD,OACE,yF,qkBClBR,IAQMjL,GAAM,CACVC,SAAU,GACVC,WAAY,GACZC,YAAa,IAGTC,GAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,QAAS,OACTC,cAAe,MACfC,gBAAiB,OACjBC,WAAY,aACZC,UAAW,GACXC,WAAY,EACZC,cAAe,EACfC,MAAO,OACPC,YAAa,EACbC,YAAa,QACbC,aAAc,GAEhBC,MAAM,SACDnB,IADA,IAEHoB,WAAY,QAEdC,QAAQ,SACHrB,IADE,IAELsB,UAAW,WAEbC,iBAAiB,SACZvB,IADW,IAEdwB,MAAO,QAETC,eAAe,SACVzB,IADS,IAEZwB,MAAO,YAII+K,GA9CM,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcxK,EAAjB,EAAiBA,KAAjB,OACnB,kBAACC,EAAA,EAAD,CAAkBG,MAAO,CAAEyB,OAAQ,IAAM3B,QAAS,kBAAMF,EAAKwK,KAC3D,kBAACrK,EAAA,EAAD,CAAMC,MAAOhC,GAAOG,WAClB,kBAAC8B,EAAA,EAAD,CAAMD,MAAOhC,GAAOe,OAAQqL,EAAaxE,SCoCzC5H,GAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTqB,KAAM,EACNjB,WAAY,SACZC,UAAW,IAEb6C,cAAe,CACbzC,YAAa,EACbE,aAAc,EACdD,YAAa,QACbP,gBAAiB,UACjBK,MAAO,MACP2C,UAAW,SACXC,QAAS,EACTnB,SAAU,IACVoB,aAAc,CAAE7C,MAAO,EAAG8C,OAAQ,GAClCC,YAAa,QACbC,cAAe,GAEjB5C,MAAO,CACLlB,SAAU,MAICwM,GA7DY,SAAC,GAA2B,IACjDzE,EACAiD,EAFwBhH,EAAwB,EAAxBA,WAAYE,EAAY,EAAZA,MAIlCnC,EAAO,SAACwK,GACZxE,EAAOwE,EAAaxE,KACpBiD,EAASuB,EAAavB,OACtBhH,EAAW4B,SAAS,mBAAoB,CAAErB,WAAUwD,OAAMiD,YAGtDzG,EAAWL,EAAMC,OAAOI,SAE9B,OACE,kBAACrC,EAAA,EAAD,CAAMC,MAAOhC,GAAOG,WAClB,kBAAC0B,EAAA,EAAD,CACEC,QAAS,WAGP,OAFA8F,EAAO,GACPiD,EAAS,GACFhH,EAAW4B,SAAS,mBAAoB,CAC7CrB,WACAwD,OACAiD,YAGJ7I,MAAOhC,GAAOqD,eAEd,kBAACpB,EAAA,EAAD,CAAMD,MAAOhC,GAAOe,OAApB,sBAEF,kBAACgB,EAAA,EAAD,CAAMC,MAAOhC,GAAOG,WACjB+L,GAAkB5J,MAAME,KAAI,SAAC4J,EAAc3J,GAAf,OAC3B,kBAAC,GAAD,CAAcC,IAAKD,EAAK2J,aAAcA,EAAcxK,KAAMA,U,qkBC7BpE,IA8DM5B,GAASC,IAAWC,OAAO,CAC/B+J,cAAe,CACbrJ,YAAa,EACbE,aAAc,EACdD,YAAa,QACbP,gBAAiB,UACjBgD,UAAW,SACXC,QAAS,EACTC,aAAc,CAAE7C,MAAO,EAAG8C,OAAQ,GAClCC,YAAa,QACbC,cAAe,GAEjBxD,UAAW,CACTqB,KAAM,EACNhB,UAAW,GACXV,WAAY,OACZC,YAAa,OACbY,MAAO,OAETuJ,QAAS,CACPrK,SAAU,GACVgG,aAAc,GACdzC,eAAgB,SAChBE,UAAW,UAEb6G,MAAO,CACL5G,QAAS,EACTjD,gBAAiB,QACjBQ,aAAc,EACdjB,SAAU,IAEZuK,eAAgB,CACd5J,UAAW,GACXqF,aAAc,IAEhBwE,MAAO,CACLrJ,WAAY,QAEd4G,KAAM,CACJ/H,SAAU,GACVgG,aAAc,GACd/F,WAAY,OACZC,YAAa,QAEfuK,cAAe,CACbC,OAAQ,GACRhH,QAAS,GACTD,UAAW,SACXhD,gBAAiB,aAEnBkK,YAAa,CACX3K,SAAU,GACVC,WAAY,OACZC,YAAa,QAGf0K,WAAY,CACVnK,gBAAiB,UACjBT,SAAU,GACVc,MAAO,IACP4C,QAAS,GACTzD,WAAY,OACZC,YAAa,OACbqD,eAAgB,SAChBE,UAAW,UAEbgF,WAAY,CACVzI,SAAU,GACVuB,MAAO,QACPkC,UAAW,YAIAgJ,GAvIQ,SAAC,GAA2B,IAAzBzI,EAAwB,EAAxBA,WAAYE,EAAY,EAAZA,MACpC,EAAsCI,mBAAS,IAA/C,WAAOoI,EAAP,KAAoBC,EAApB,KACM7K,EAAOoC,EAAMC,OAAOrC,KACpByC,EAAWL,EAAMC,OAAOI,SACxBN,EAASM,EAASF,GAqBxB,OACE,kBAAC4G,EAAA,EAAD,CAAc9I,MAAOhC,GAAOG,WAC1B,kBAAC8B,EAAA,EAAD,CAAMoI,MAAM,OAAOrI,MAAOhC,GAAO4H,MAAjC,oBAGA,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEe,cAAa,MACRhH,GAELiH,SAAU,SAACQ,IA5BnB,SAA4BA,GAA5B,QAAA6B,EAAAC,OAAA,gDACQC,EADR,SAEO/B,GAFP,IAGIqD,aAAcrB,OACdlJ,OAAQ,eAGVS,IACG6B,WACAC,IAFH,SAEgBX,EAFhB,UAEgCnC,EAAKuC,IAClCqH,IAAIJ,GACJK,OAAM,SAACnG,GACNmH,EAAenH,EAAMoG,YAGzB5H,EAAW4B,SAAS,mBAAoB,CAAE9D,KAAMwJ,EAAS/G,aAf3D,4DA6BUuF,CAAaP,KAGf,kBAAC,EAAKJ,MAAN,CACEpB,KAAK,QACL8D,YAAY,kBACZC,eAAe,SAEjB,kBAAC,EAAK3C,MAAN,CACEpB,KAAK,cACL8D,YAAY,yBACZC,eAAe,SAEjB,kBAAC,EAAK3C,MAAN,CACEpB,KAAK,UACL8D,YAAY,+BACZC,eAAe,SAEjB,kBAAC,EAAKnF,OAAN,CAAazF,MAAO,iBACpB,kBAAC,EAAK6I,aAAN,CAAmBvE,MAAOkH,QClD9BG,GAAQC,cAEC,SAASC,KACtB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACH,GAAMI,UAAP,CACEC,cAAe,CACbC,YAAa,CACX1M,gBAAiB,WAEnB2M,gBAAiB,QACjBC,iBAAkB,CAChB9E,UAAW,SACXpH,WAAY,QAEdmM,0BAA2B,CACzBC,KAAM,KAIV,kBAACV,GAAMW,OAAP,CACEzF,KAAK,qBACL0F,UAAWxB,GACXyB,QAAS,CAAExM,MAAO,mBAEpB,kBAAC2L,GAAMW,OAAP,CACEzF,KAAK,kBACL0F,UAAW1J,EACX2J,QAAS,CAAExM,MAAO,gBAEpB,kBAAC2L,GAAMW,OAAP,CACEzF,KAAK,qBACL0F,UAAWjB,GACXkB,QAAS,CAAExM,MAAO,mCAEpB,kBAAC2L,GAAMW,OAAP,CACEzF,KAAK,mBACL0F,UAAW5C,GACX6C,QAAS,CAAExM,MAAO,qBAEpB,kBAAC2L,GAAMW,OAAP,CACEzF,KAAK,mBACL0F,UAAWnH,EACXoH,QAAS,CAAExM,MAAO,kBAEpB,kBAAC2L,GAAMW,OAAP,CACEzF,KAAK,iBACL0F,UAAWhB,GACXiB,QAAS,CAAExM,MAAO,iBAObd,IAAWC,OAAO,CAC/BC,UAAW,CACTqB,KAAM,EACNlB,gBAAiB,OACjBC,WAAY,SACZ6C,eAAgB,a","file":"static/js/app.0b234fac.chunk.js","sourcesContent":["import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native'\n\n// TODO (L11): conditional styling?\n\nconst Task = ({ task, view }) => {\n  return (\n    <TouchableOpacity onPress={() => view(task)}>\n      <View style={styles.container}>\n        <View style={styles.textView}>\n          <Text style={styles.title}>{task.title}</Text>\n          <Text style={styles.dateDue}>Due: {task.dateDue}</Text>\n          <Text style={styles.incompleteStatus}>Status: {task.status}</Text>\n        </View>\n        <View style={styles.urgencyView}>\n          <Text style={styles.urgencyStatus}>\n            {task.urgency === 1 ? '❗️' : ''}{' '}\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    alignItems: 'flex-start',\n    marginTop: 20,\n    paddingTop: 5,\n    paddingBottom: 5,\n    width: '100%',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 5,\n  },\n  title: {\n    ...row,\n    fontWeight: '500',\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n  urgencyStatus: {\n    ...row,\n    color: 'red',\n    fontSize: 32,\n  },\n  urgencyView: {\n    ...row,\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-end',\n  },\n  textView: {\n    ...row,\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    width: '65%',\n    color: 'red',\n  },\n})\n\nexport default Task\n","import React from 'react'\nimport { ScrollView, StyleSheet } from 'react-native'\nimport Task from './Task'\n\nconst TaskList = ({ tasks, view }) => (\n  <ScrollView style={styles.container}>\n    {tasks.map((task, idx) => (\n      <Task key={idx} task={task} view={view} />\n    ))}\n  </ScrollView>\n)\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '85%',\n    maxWidth: 800,\n  },\n})\n\nexport default TaskList\n","import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCfQWvGnwih9JFpyL0ypAswUMSdEyD8AdE\",\n    authDomain: \"myelinapp-513fb.firebaseapp.com\",\n    databaseURL: \"https://myelinapp-513fb-default-rtdb.firebaseio.com\",\n    projectId: \"myelinapp-513fb\",\n    storageBucket: \"myelinapp-513fb.appspot.com\",\n    messagingSenderId: \"936159143445\",\n    appId: \"1:936159143445:web:2b03711a46dc9022f9501c\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport { firebase };","import React, { useEffect, useState } from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native'\nimport TaskList from '../components/TaskList'\nimport { firebase } from '../firebase'\n\nconst fixPatientTasks = (patient) => {\n  const taskArray = []\n  Object.keys(patient.tasks).map((key) => {\n    const task = patient.tasks[key]\n    task['id'] = key\n    taskArray.push(task)\n  })\n  return {\n    ...patient,\n    taskList: taskArray,\n  }\n}\n\nconst MainTasksScreen = ({ navigation, route }) => {\n  const userId = route.params.user.id\n  const [thisUser, setThisUser] = useState(null)\n\n  const view = (task) => {\n    navigation.navigate('TaskDetailScreen', { task, thisUser })\n  }\n\n  useEffect(() => {\n    const db = firebase.database().ref(`users/${userId}`)\n    const handleData = (snap) => {\n      if (snap.val()) setThisUser(fixPatientTasks(snap.val()))\n    }\n    db.on('value', handleData, (error) => console.log(error))\n    return () => {\n      db.off('value', handleData)\n    }\n  }, [])\n\n  return thisUser ? (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => navigation.navigate('PrebuiltTaskScreen', { thisUser })}\n        style={styles.newTaskButton}\n      >\n        <Text style={styles.title}>Create new task</Text>\n      </TouchableOpacity>\n      <TaskList tasks={thisUser.taskList} view={view} />\n    </View>\n  ) : (\n    <View style={styles.container}>\n      <Text>Loading...</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default MainTasksScreen\n","import React from 'react'\nimport { Text, View, StyleSheet, Linking, Button } from 'react-native'\n\nconst TaskDetailScreen = ({ navigation, route }) => {\n  const task = route.params.task\n  const thisUser = route.params.thisUser\n\n  // handle comments & notif later\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{task.title}</Text>\n      <Text style={styles.date}>\n        Created: {task.dateCreated} | Due: {task.dateDue}\n      </Text>\n      <Text style={styles.owner}>- {task.owner} -</Text>\n      <Text style={styles.description}>{task.description}</Text>\n      {task.resources != '' && (\n        <Text\n          style={styles.resource}\n          onPress={() => Linking.openURL(task.resources)}\n        >\n          {task.resources}\n        </Text>\n      )}\n\n      <View style={styles.statusContainer}>\n        <Text style={styles.incompleteStatus}>{task.status}</Text>\n      </View>\n      <Button\n        title=\"Edit Task\"\n        onPress={() =>\n          navigation.navigate('EditTaskScreen', { task, thisUser })\n        }\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  statusContainer: {\n    backgroundColor: 'white',\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 75,\n    paddingRight: 75,\n    borderWidth: 1,\n    borderColor: 'black',\n    marginBottom: 15,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '500',\n  },\n  description: {\n    fontSize: 16,\n    marginBottom: 10,\n  },\n  resource: {\n    fontSize: 16,\n    marginBottom: 10,\n    color: 'blue',\n    textDecorationLine: 'underline',\n  },\n  date: {\n    fontSize: 14,\n    fontStyle: 'italic',\n    marginBottom: 5,\n  },\n  incompleteStatus: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'red',\n  },\n  completeStatus: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'green',\n  },\n  owner: {\n    marginBottom: 30,\n  },\n})\n\nexport default TaskDetailScreen\n","export default {\n  primary: 'lightblue',\n  secondary: '#039be5',\n  black: '#222222',\n  white: '#ffffff',\n  ghostWhite: '#f8f8ff',\n  lightGrey: '#f9f9f9',\n  mediumGrey: '#6e6869',\n  red: '#fc5c65',\n  lightPurple: '#c3a6ff',\n}\n","import React from 'react'\nimport { StyleSheet, Text } from 'react-native'\n\nimport Colors from './colors'\n\nexport default function FormErrorMessage({ error, visible }) {\n  if (!error || !visible) {\n    return null\n  }\n\n  return <Text style={styles.errorText}>{error}</Text>\n}\n\nconst styles = StyleSheet.create({\n  errorText: {\n    marginLeft: 15,\n    color: Colors.red,\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: '600',\n  },\n})\n","import React from 'react'\nimport { View, StyleSheet, TextInput, TouchableOpacity } from 'react-native'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\n\nimport Colors from './colors'\n\nexport default function FormTextInput({\n  leftIcon,\n  width = '100%',\n  rightIcon,\n  handlePasswordVisibility,\n  ...otherProps\n}) {\n  return (\n    <View style={[styles.container, { width }]}>\n      {leftIcon && (\n        <MaterialCommunityIcons\n          name={leftIcon}\n          size={20}\n          color={Colors.mediumGrey}\n          style={styles.icon}\n        />\n      )}\n      <TextInput\n        style={styles.input}\n        placeholderTextColor={Colors.mediumGrey}\n        {...otherProps}\n      />\n      {rightIcon && (\n        <TouchableOpacity onPress={handlePasswordVisibility}>\n          <MaterialCommunityIcons\n            name={rightIcon}\n            size={20}\n            color={Colors.mediumGrey}\n            style={styles.rightIconStyles}\n          />\n        </TouchableOpacity>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.lightGrey,\n    borderRadius: 25,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    padding: 15,\n    marginVertical: 10,\n  },\n  icon: {\n    marginRight: 10,\n  },\n  input: {\n    flex: 1,\n    width: '100%',\n    fontSize: 18,\n    color: Colors.black,\n  },\n  rightIconStyles: {\n    alignSelf: 'center',\n    marginLeft: 10,\n  },\n})\n","import React from 'react'\nimport { Text, TouchableOpacity, StyleSheet } from 'react-native'\nimport { useFormikContext } from 'formik'\n\nimport Colors from './colors'\n\nexport default function FormButton({ title, onPress, color = 'lightPurple' }) {\n  const { handleSubmit, values } = useFormikContext()\n  const onPressAndSubmit = () => {\n    if (onPress) {\n      onPress()\n    }\n    handleSubmit()\n  }\n  const text = typeof title === 'function' ? title(values) : title\n\n  return (\n    <TouchableOpacity\n      style={[styles.button, { backgroundColor: Colors[color] }]}\n      onPress={onPressAndSubmit}\n    >\n      <Text style={styles.buttonText}>{text}</Text>\n    </TouchableOpacity>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  buttonText: {\n    color: Colors.black,\n    fontSize: 18,\n    fontWeight: '600',\n    textTransform: 'uppercase',\n  },\n})\n","import React from 'react'\nimport { StyleSheet, Switch, Text, View } from 'react-native'\nimport { useFormikContext } from 'formik'\n\nimport Colors from './colors'\n\nexport default function FormSwitch({\n  name,\n  title,\n  onChange = (x) => x,\n  ...otherProps\n}) {\n  const { values, setFieldValue } = useFormikContext()\n  const value = values[name]\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{title}</Text>\n      <Switch\n        value={value}\n        onValueChange={(value) => {\n          onChange(value)\n          setFieldValue(name, value)\n        }}\n        {...otherProps}\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  title: {\n    color: Colors.white,\n    fontSize: 18,\n    fontWeight: '600',\n    marginRight: 5,\n  },\n})\n","import Base from './Forms/Form'\nimport FormField from './Forms/FormField'\nimport FormButton from './Forms/FormButton'\nimport FormErrorMessage from './Forms/FormErrorMessage'\nimport FormSwitch from './Forms/FormSwitch'\n\nconst Form = (props) => Base(props)\n\nForm.Field = FormField\nForm.Button = FormButton\nForm.ErrorMessage = FormErrorMessage\nForm.Switch = FormSwitch\n\nexport default Form\n","import React from 'react'\nimport { Formik } from 'formik'\n\nexport default function Form({\n  children,\n  initialValues,\n  onSubmit,\n  validationSchema,\n}) {\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {() => <React.Fragment>{children}</React.Fragment>}\n    </Formik>\n  )\n}\n","import React from 'react'\nimport { useFormikContext } from 'formik'\n\nimport FormErrorMessage from './FormErrorMessage'\nimport FormTextInput from './FormTextInput'\n\nexport default function FormField({ name, width, ...otherProps }) {\n  const { setFieldTouched, setFieldValue, values, errors, touched } =\n    useFormikContext()\n\n  return (\n    <React.Fragment>\n      <FormTextInput\n        value={values[name]}\n        onChangeText={(text) => setFieldValue(name, text)}\n        onBlur={() => setFieldTouched(name)}\n        width={width}\n        {...otherProps}\n      />\n      <FormErrorMessage error={errors[name]} visible={touched[name]} />\n    </React.Fragment>\n  )\n}\n","import React, { useState } from 'react'\nimport { SafeAreaView, StyleSheet, Text, TouchableOpacity } from 'react-native'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport Form from '../components/Form'\nimport { firebase } from '../firebase'\n\nconst CreateTaskScreen = ({ navigation, route }) => {\n  const [submitted, setSubmitted] = useState(false)\n  //const [newTask, setNewTask] = useState({}) // Keep track of new task\n\n  // const CourseEditScreen = ({ navigation, route }) => {\n  //   const course = route.params.course;\n  //   const [submitError, setSubmitError] = useState('');\n\n  const thisUser = route.params.thisUser\n  const userId = thisUser.id\n  const name = route.params.name\n  const detail = route.params.detail\n\n  // Update the 'newTask' variable based on user input\n  async function handleSubmit(values) {\n    const { title, description, dateDue } = values\n    const newTask = {\n      title,\n      description,\n      dateCreated: Date(),\n      dateDue,\n      status: 'Incomplete',\n      owner: userId,\n      comments: '',\n      notifications: '',\n    }\n    firebase\n      .database()\n      .ref('users')\n      .child(userId)\n      .child('tasks')\n      .child(Date.now())\n      .set(newTask)\n      .catch((error) => {\n        console.log(error.message)\n      })\n  }\n\n  return !submitted ? (\n    <SafeAreaView style={styles.container}>\n      <Text label=\"Name\" style={styles.name}>\n        Post a new task!\n      </Text>\n      <ScrollView>\n        <Form\n          initialValues={{\n            title: name,\n            description: detail,\n            dateCreated: '',\n            dateDue: '',\n            status: 'Incomplete',\n            owner: '',\n            comments: '',\n            notifications: '',\n            resources: '',\n          }}\n          onSubmit={(values) => {\n            setSubmitted(true)\n            handleSubmit(values)\n          }}\n        >\n          <Form.Field\n            name=\"title\"\n            placeholder=\"Enter task name\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"description\"\n            placeholder=\"Enter task description\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"dateDue\"\n            placeholder=\"Enter due date for this task\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Button title={'Add new task'} />\n        </Form>\n      </ScrollView>\n    </SafeAreaView>\n  ) : (\n    <SafeAreaView style={styles.container}>\n      <Text style={styles.h1_text}>Task successfully created!</Text>\n      <TouchableOpacity\n        style={styles.addTaskButton}\n        onPress={() => navigation.navigate('MainTasksScreen', { thisUser })} // Pass new task to 'MainTasksScreen.js'\n      >\n        <Text style={styles.buttonText}>Return to Home Screen</Text>\n      </TouchableOpacity>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  addTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  container: {\n    flex: 1,\n    marginTop: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: '90%',\n  },\n  h1_text: {\n    fontSize: 48,\n    marginBottom: 25,\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  field: {\n    padding: 5,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 18,\n  },\n  fieldContainer: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  label: {\n    fontWeight: 'bold',\n  },\n  name: {\n    fontSize: 24,\n    marginBottom: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  connectButton: {\n    margin: 30,\n    padding: 10,\n    textAlign: 'center',\n    backgroundColor: 'lightblue',\n  },\n  connectText: {\n    fontSize: 22,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    // fontWeight: 500,\n  },\n  roleButton: {\n    backgroundColor: '#2196F3',\n    fontSize: 16,\n    width: 250,\n    padding: 15,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'black',\n    textAlign: 'center',\n  },\n})\n\nexport default CreateTaskScreen\n","import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native'\n\n// TODO (L11): conditional styling?\n\nconst UserProfile = ({ user, view }) => (\n  <TouchableOpacity style={{ height: 60 }} onPress={() => view(user)}>\n    <View style={styles.container}>\n      <Text style={styles.title}>{user.patientInfo.name}</Text>\n    </View>\n  </TouchableOpacity>\n)\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    marginTop: 20,\n    paddingTop: 5,\n    paddingBottom: 5,\n    //paddingLeft: 10,\n    //paddingRight: 75,\n    width: '100%',\n    height: '10%',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 5,\n  },\n  title: {\n    ...row,\n    fontWeight: '500',\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n})\n\nexport default UserProfile\n","import React, { useState, useEffect } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport UserProfile from '../components/UserProfile'\nimport { firebase } from '../firebase'\n\nconst ViewPatientsScreen = ({ navigation }) => {\n  const view = (user) => {\n    navigation.navigate('MainTasksScreen', { user: user })\n  }\n\n  const [userList, setUserList] = useState([])\n\n  useEffect(() => {\n    const db = firebase.database().ref('users')\n    const handleData = (snap) => {\n      if (snap.val()) {\n        const users = snap.val()\n        setUserList(Object.keys(users).map((key) => users[key]))\n      }\n    }\n    db.on('value', handleData, (error) => console.log(error))\n    return () => db.off('value', handleData)\n  }, [])\n\n  return (\n    <View style={styles.container}>\n      {userList.map((user, idx) => (\n        <UserProfile key={idx} user={user} view={view} />\n      ))}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default ViewPatientsScreen\n","export const PrebuiltTaskArray = {\n  tasks: [\n    {\n      name: 'I need a Handicap Vehicle Permit',\n      detail: 'Please order or renew handicap vehicle permit.',\n    },\n    {\n      name: 'I need a new blood glucose meter',\n      detail: 'Please send a prescription for a new glucometer.',\n    },\n    {\n      name: 'What is the best diet for me?',\n      detail: 'Please give me information on the most appropriate diet for me.',\n    },\n    {\n      name: 'I need help trimming my toenails.',\n      detail: 'Please schedule me an appointment with podiatry.',\n    },\n    {\n      name: 'What can I take for my seasonal allergies?',\n      detail:\n        'Please send me a list of over-the-counter medications that are safe for me to take.',\n    },\n  ],\n}\n","import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native'\n\nconst PrebuiltTask = ({ prebuiltTask, view }) => (\n  <TouchableOpacity style={{ height: 60 }} onPress={() => view(prebuiltTask)}>\n    <View style={styles.container}>\n      <Text style={styles.title}>{prebuiltTask.name}</Text>\n    </View>\n  </TouchableOpacity>\n)\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    alignItems: 'flex-start',\n    marginTop: 20,\n    paddingTop: 5,\n    paddingBottom: 5,\n    width: '100%',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 5,\n  },\n  title: {\n    ...row,\n    fontWeight: '500',\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n})\n\nexport default PrebuiltTask\n","import React from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native'\nimport { PrebuiltTaskArray } from '../utils/dataTask'\nimport PrebuiltTask from '../components/PrebuiltTask'\n\nconst PrebuiltTaskScreen = ({ navigation, route }) => {\n  let name\n  let detail\n\n  const view = (prebuiltTask) => {\n    name = prebuiltTask.name\n    detail = prebuiltTask.detail\n    navigation.navigate('CreateTaskScreen', { thisUser, name, detail })\n  }\n\n  const thisUser = route.params.thisUser\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => {\n          name = ''\n          detail = ''\n          return navigation.navigate('CreateTaskScreen', {\n            thisUser,\n            name,\n            detail,\n          })\n        }}\n        style={styles.newTaskButton}\n      >\n        <Text style={styles.title}>Create Blank Task</Text>\n      </TouchableOpacity>\n      <View style={styles.container}>\n        {PrebuiltTaskArray.tasks.map((prebuiltTask, idx) => (\n          <PrebuiltTask key={idx} prebuiltTask={prebuiltTask} view={view} />\n        ))}\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default PrebuiltTaskScreen\n","import React, { useState } from 'react'\nimport { SafeAreaView, StyleSheet, Text } from 'react-native'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport Form from '../components/Form'\nimport { firebase } from '../firebase'\n\nconst EditTaskScreen = ({ navigation, route }) => {\n  const [submitError, setSubmitError] = useState('')\n  const task = route.params.task\n  const thisUser = route.params.thisUser\n  const userId = thisUser.id\n\n  // Update the 'newTask' variable based on user input\n  async function handleSubmit(values) {\n    const newTask = {\n      ...values,\n      dateModified: Date(),\n      status: 'Incomplete',\n    }\n\n    firebase\n      .database()\n      .ref(`users/${userId}/tasks/${task.id}`)\n      .set(newTask)\n      .catch((error) => {\n        setSubmitError(error.message)\n      })\n\n    navigation.navigate('TaskDetailScreen', { task: newTask, thisUser })\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text label=\"Name\" style={styles.name}>\n        Task Edit Screen\n      </Text>\n      <ScrollView>\n        <Form\n          initialValues={{\n            ...task,\n          }}\n          onSubmit={(values) => {\n            handleSubmit(values)\n          }}\n        >\n          <Form.Field\n            name=\"title\"\n            placeholder=\"Enter task name\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"description\"\n            placeholder=\"Enter task description\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"dateDue\"\n            placeholder=\"Enter due date for this task\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Button title={'Save changes'} />\n          <Form.ErrorMessage error={submitError} />\n        </Form>\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  addTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  container: {\n    flex: 1,\n    marginTop: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: '90%',\n  },\n  h1_text: {\n    fontSize: 48,\n    marginBottom: 25,\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  field: {\n    padding: 5,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 18,\n  },\n  fieldContainer: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  label: {\n    fontWeight: 'bold',\n  },\n  name: {\n    fontSize: 24,\n    marginBottom: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  connectButton: {\n    margin: 30,\n    padding: 10,\n    textAlign: 'center',\n    backgroundColor: 'lightblue',\n  },\n  connectText: {\n    fontSize: 22,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    // fontWeight: 500,\n  },\n  roleButton: {\n    backgroundColor: '#2196F3',\n    fontSize: 16,\n    width: 250,\n    padding: 15,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'black',\n    textAlign: 'center',\n  },\n})\n\nexport default EditTaskScreen\n","import React from 'react'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { StyleSheet } from 'react-native'\nimport { NavigationContainer } from '@react-navigation/native'\nimport MainTasksScreen from './screens/MainTasksScreen'\nimport TaskDetailScreen from './screens/TaskDetailScreen'\nimport CreateTaskScreen from './screens/CreateTaskScreen'\nimport ViewPatientsScreen from './screens/ViewPatientsScreen'\nimport PrebuiltTaskScreen from './screens/PrebuiltTaskScreen'\nimport EditTaskScreen from './screens/EditTaskScreen'\n\nconst Stack = createStackNavigator()\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={{\n          headerStyle: {\n            backgroundColor: '#610f94', // some purple color lol\n          },\n          headerTintColor: 'white',\n          headerTitleStyle: {\n            alignSelf: 'center',\n            fontWeight: 'bold',\n          },\n          headerTitleContainerStyle: {\n            left: 0,\n          },\n        }}\n      >\n        <Stack.Screen\n          name=\"ViewPatientsScreen\"\n          component={ViewPatientsScreen}\n          options={{ title: 'Your Patients' }}\n        />\n        <Stack.Screen\n          name=\"MainTasksScreen\"\n          component={MainTasksScreen}\n          options={{ title: 'Main Tasks' }}\n        />\n        <Stack.Screen\n          name=\"PrebuiltTaskScreen\"\n          component={PrebuiltTaskScreen}\n          options={{ title: 'Choose from Pre-Created Tasks' }}\n        />\n        <Stack.Screen\n          name=\"CreateTaskScreen\"\n          component={CreateTaskScreen}\n          options={{ title: 'Create New Task' }}\n        />\n        <Stack.Screen\n          name=\"TaskDetailScreen\"\n          component={TaskDetailScreen}\n          options={{ title: 'Task Details' }}\n        />\n        <Stack.Screen\n          name=\"EditTaskScreen\"\n          component={EditTaskScreen}\n          options={{ title: 'Edit Task' }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n"],"sourceRoot":""}