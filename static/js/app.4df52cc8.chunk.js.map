{"version":3,"sources":["components/Task.js","components/TaskList.js","firebase.js","screens/MainTasksScreen.js","screens/TaskDetailScreen.js","components/Forms/colors.js","components/Forms/FormErrorMessage.js","components/Forms/FormTextInput.js","components/Forms/FormButton.js","components/Forms/FormSwitch.js","components/Form.js","components/Forms/Form.js","components/Forms/FormField.js","utils/taskBase.js","screens/CreateTaskScreen.js","components/UserProfile.js","screens/ViewPatientsScreen.js","utils/dataTask.js","components/PrebuiltTask.js","screens/PrebuiltTaskScreen.js","screens/EditTaskScreen.js","screens/ViewMessagesScreen.js","App.js"],"names":["row","fontSize","marginLeft","marginRight","containerStyle","display","flexDirection","alignItems","marginTop","paddingTop","paddingBottom","width","borderWidth","borderColor","borderRadius","styles","StyleSheet","create","container","backgroundColor","complete","title","fontWeight","dateDue","fontStyle","incompleteStatus","color","completeStatus","urgencyStatus","urgencyView","flex","textView","Task","task","view","TouchableOpacity","onPress","View","style","status","Text","urgency","maxWidth","TaskList","tasks","ScrollView","map","idx","key","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","justifyContent","newTaskButton","textAlign","padding","shadowOffset","height","shadowColor","shadowOpacity","MainTasksScreen","navigation","userId","route","params","user","id","useState","thisUser","setThisUser","useEffect","db","database","ref","handleData","snap","val","patient","taskArray","Object","keys","push","taskList","fixPatientTasks","on","error","console","log","off","navigate","statusContainer","paddingLeft","paddingRight","marginBottom","description","resource","textDecorationLine","date","owner","TaskDetailScreen","handleComplete","wantToMarkComplete","a","async","newTask","set","catch","setSubmitError","message","dateCreated","resources","Linking","openURL","Button","remove","primary","secondary","black","white","ghostWhite","lightGrey","mediumGrey","red","lightPurple","FormErrorMessage","visible","errorText","Colors","FormTextInput","leftIcon","rightIcon","handlePasswordVisibility","otherProps","MaterialCommunityIcons","name","size","icon","TextInput","input","placeholderTextColor","rightIconStyles","marginVertical","alignSelf","button","buttonText","textTransform","Form","props","children","initialValues","onSubmit","validationSchema","Fragment","Base","Field","useFormikContext","setFieldTouched","setFieldValue","values","errors","touched","value","onChangeText","text","onBlur","handleSubmit","ErrorMessage","Switch","onChange","x","onValueChange","taskBase","dateModified","comments","notifications","addTaskButton","h1_text","field","fieldContainer","label","connectButton","margin","connectText","roleButton","CreateTaskScreen","submitted","setSubmitted","submitError","prebuiltTask","SafeAreaView","Date","now","placeholder","autoCapitalize","UserProfile","patientInfo","ViewPatientsScreen","userList","setUserList","users","PrebuiltTaskArray","PrebuiltTask","PrebuiltTaskScreen","EditTaskScreen","MessageField","fieldText","RenderMessages","messages","userContainer","ViewMessagesScreen","setMessages","messageList","StatusBar","Stack","createStackNavigator","App","NavigationContainer","Navigator","screenOptions","headerStyle","headerTintColor","headerTitleStyle","headerTitleContainerStyle","left","Screen","component","options"],"mappings":"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","file":"static/js/app.4df52cc8.chunk.js","sourcesContent":["import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity, PickerIOSComponent } from 'react-native'\n\n// TODO (L11): conditional styling?\n\nconst Task = ({ task, view }) => {\n  return (\n    <TouchableOpacity onPress={() => view(task)}>\n      <View style={task.status === \"Complete\" ? styles.complete : styles.container}>\n        <View style={styles.textView}>\n          <Text style={styles.title}>{task.title}</Text>\n          <Text style={styles.dateDue}>Due: {task.dateDue}</Text>\n        </View>\n        <View style={styles.urgencyView}>\n          <Text style={styles.urgencyStatus}>\n            {task.urgency === 1 ? '❗️' : ''}{' '}\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst containerStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'flex-start',\n  marginTop: 20,\n  paddingTop: 5,\n  paddingBottom: 5,\n  width: '100%',\n  borderWidth: 1,\n  borderColor: 'black',\n  borderRadius: 5,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    ...containerStyle,\n    backgroundColor: '#fff',\n  },\n  complete: {\n    ...containerStyle,\n    backgroundColor: \"gray\",\n  },\n  title: {\n    ...row,\n    fontWeight: '500',\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n  urgencyStatus: {\n    ...row,\n    color: 'red',\n    fontSize: 32,\n  },\n  urgencyView: {\n    ...row,\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-end',\n  },\n  textView: {\n    ...row,\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    width: '65%',\n    color: 'red',\n  },\n})\n\nexport default Task\n","import React from 'react'\nimport { ScrollView, StyleSheet } from 'react-native'\nimport Task from './Task'\n\nconst TaskList = ({ tasks, view }) => (\n  <ScrollView style={styles.container}>\n    {tasks.map((task, idx) => (\n      <Task key={idx} task={task} view={view} />\n    ))}\n  </ScrollView>\n)\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '85%',\n    maxWidth: 800,\n  },\n})\n\nexport default TaskList\n","import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCfQWvGnwih9JFpyL0ypAswUMSdEyD8AdE\",\n    authDomain: \"myelinapp-513fb.firebaseapp.com\",\n    databaseURL: \"https://myelinapp-513fb-default-rtdb.firebaseio.com\",\n    projectId: \"myelinapp-513fb\",\n    storageBucket: \"myelinapp-513fb.appspot.com\",\n    messagingSenderId: \"936159143445\",\n    appId: \"1:936159143445:web:2b03711a46dc9022f9501c\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport { firebase };","import React, { useEffect, useState } from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native'\nimport TaskList from '../components/TaskList'\nimport { firebase } from '../firebase'\n\nconst fixPatientTasks = (patient) => {\n  const taskArray = []\n  Object.keys(patient.tasks).map((key) => {\n    const task = patient.tasks[key]\n    task['id'] = key\n    taskArray.push(task)\n  })\n  return {\n    ...patient,\n    taskList: taskArray,\n  }\n}\n\nconst MainTasksScreen = ({ navigation, route }) => {\n  const userId = route.params.user.id\n  const [thisUser, setThisUser] = useState(null)\n\n  const view = (task) => {\n    navigation.navigate('TaskDetailScreen', { task, thisUser })\n  }\n\n  useEffect(() => {\n    const db = firebase.database().ref(`users/${userId}`)\n    const handleData = (snap) => {\n      if (snap.val()) setThisUser(fixPatientTasks(snap.val()))\n    }\n    db.on('value', handleData, (error) => console.log(error))\n    return () => {\n      db.off('value', handleData)\n    }\n  }, [])\n\n  return thisUser ? (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => navigation.navigate('PrebuiltTaskScreen', { thisUser })}\n        style={styles.newTaskButton}\n      >\n        <Text style={styles.title}>Create new task</Text>\n      </TouchableOpacity>\n      <TaskList tasks={thisUser.taskList} view={view} />\n    </View>\n  ) : (\n    <View style={styles.container}>\n      <Text>Loading...</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default MainTasksScreen\n","import React from 'react'\nimport { Text, View, StyleSheet, Linking, Button } from 'react-native'\nimport { firebase } from '../firebase'\n\nconst TaskDetailScreen = ({ navigation, route }) => {\n  const task = route.params.task\n  const thisUser = route.params.thisUser\n  const userId = thisUser.id\n\n  async function handleComplete(wantToMarkComplete) {\n    const newTask = {...task};\n\n    newTask.status = wantToMarkComplete ? \"Complete\" : \"Incomplete\"\n\n    firebase\n      .database()\n      .ref(`users/${userId}/tasks/${task.id}`)\n      .set(newTask)\n      .catch((error) => {\n        setSubmitError(error.message)\n      })\n\n    navigation.navigate('MainTasksScreen', {thisUser})\n  }\n\n  async function handleDelete() {\n    firebase\n      .database()\n      .ref(`users/${userId}/tasks/${task.id}`)\n      .remove()\n      .catch((error) => {\n        setSubmitError(error.message)\n      })\n\n    navigation.navigate('MainTasksScreen', {thisUser})\n  }\n\n  // handle comments & notif later\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{task.title}</Text>\n      <Text style={styles.date}>\n        Created: {task.dateCreated} | Due: {task.dateDue}\n      </Text>\n      <Text style={styles.owner}>- {task.owner} -</Text>\n      <Text style={styles.description}>{task.description}</Text>\n      {task.resources != '' && (\n        <Text\n          style={styles.resource}\n          onPress={() => Linking.openURL(task.resources)}\n        >\n          {task.resources}\n        </Text>\n      )}\n\n      <View style={styles.statusContainer}>\n        <Text style={task.status===\"Complete\" ? styles.completeStatus : styles.incompleteStatus}>{task.status}</Text>\n      </View>\n      <Button\n        title=\"Edit Task\"\n        onPress={() =>\n          navigation.navigate('EditTaskScreen', { task, thisUser })\n        }\n      />\n      <Button\n      title=\"View Messages\"\n      onPress={() =>\n        navigation.navigate('ViewMessagesScreen', { task, thisUser })\n      }\n      />\n\n      {task.status === \"Complete\" ? \n      <Button\n        title=\"Mark Task as Incomplete\"\n        onPress={() =>\n          // Mark as complete in firebase\n          handleComplete(false)\n        }\n      /> : \n      <Button\n        title=\"Complete Task\"\n        onPress={() =>\n          // Mark as complete in firebase\n          handleComplete(true)\n        }\n      />}\n      \n      <Button\n        title=\"Delete Task\"\n        onPress={() =>\n          // Delete in firebase\n          handleDelete()\n        }\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  statusContainer: {\n    backgroundColor: 'white',\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 75,\n    paddingRight: 75,\n    borderWidth: 1,\n    borderColor: 'black',\n    marginBottom: 15,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '500',\n  },\n  description: {\n    fontSize: 16,\n    marginBottom: 10,\n  },\n  resource: {\n    fontSize: 16,\n    marginBottom: 10,\n    color: 'blue',\n    textDecorationLine: 'underline',\n  },\n  date: {\n    fontSize: 14,\n    fontStyle: 'italic',\n    marginBottom: 5,\n  },\n  incompleteStatus: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'red',\n  },\n  completeStatus: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'green',\n  },\n  owner: {\n    marginBottom: 30,\n  },\n})\n\nexport default TaskDetailScreen\n","export default {\n  primary: 'lightblue',\n  secondary: '#039be5',\n  black: '#222222',\n  white: '#ffffff',\n  ghostWhite: '#f8f8ff',\n  lightGrey: '#f9f9f9',\n  mediumGrey: '#6e6869',\n  red: '#fc5c65',\n  lightPurple: '#c3a6ff',\n}\n","import React from 'react'\nimport { StyleSheet, Text } from 'react-native'\n\nimport Colors from './colors'\n\nexport default function FormErrorMessage({ error, visible }) {\n  if (!error || !visible) {\n    return null\n  }\n\n  return <Text style={styles.errorText}>{error}</Text>\n}\n\nconst styles = StyleSheet.create({\n  errorText: {\n    marginLeft: 15,\n    color: Colors.red,\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: '600',\n  },\n})\n","import React from 'react'\nimport { View, StyleSheet, TextInput, TouchableOpacity } from 'react-native'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\n\nimport Colors from './colors'\n\nexport default function FormTextInput({\n  leftIcon,\n  width = '100%',\n  rightIcon,\n  handlePasswordVisibility,\n  ...otherProps\n}) {\n  return (\n    <View style={[styles.container, { width }]}>\n      {leftIcon && (\n        <MaterialCommunityIcons\n          name={leftIcon}\n          size={20}\n          color={Colors.mediumGrey}\n          style={styles.icon}\n        />\n      )}\n      <TextInput\n        style={styles.input}\n        placeholderTextColor={Colors.mediumGrey}\n        {...otherProps}\n      />\n      {rightIcon && (\n        <TouchableOpacity onPress={handlePasswordVisibility}>\n          <MaterialCommunityIcons\n            name={rightIcon}\n            size={20}\n            color={Colors.mediumGrey}\n            style={styles.rightIconStyles}\n          />\n        </TouchableOpacity>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.lightGrey,\n    borderRadius: 25,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    padding: 15,\n    marginVertical: 10,\n  },\n  icon: {\n    marginRight: 10,\n  },\n  input: {\n    flex: 1,\n    width: '100%',\n    fontSize: 18,\n    color: Colors.black,\n  },\n  rightIconStyles: {\n    alignSelf: 'center',\n    marginLeft: 10,\n  },\n})\n","import React from 'react'\nimport { Text, TouchableOpacity, StyleSheet } from 'react-native'\nimport { useFormikContext } from 'formik'\n\nimport Colors from './colors'\n\nexport default function FormButton({ title, onPress, color = 'lightPurple' }) {\n  const { handleSubmit, values } = useFormikContext()\n  const onPressAndSubmit = () => {\n    if (onPress) {\n      onPress()\n    }\n    handleSubmit()\n  }\n  const text = typeof title === 'function' ? title(values) : title\n\n  return (\n    <TouchableOpacity\n      style={[styles.button, { backgroundColor: Colors[color] }]}\n      onPress={onPressAndSubmit}\n    >\n      <Text style={styles.buttonText}>{text}</Text>\n    </TouchableOpacity>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  buttonText: {\n    color: Colors.black,\n    fontSize: 18,\n    fontWeight: '600',\n    textTransform: 'uppercase',\n  },\n})\n","import React from 'react'\nimport { StyleSheet, Switch, Text, View } from 'react-native'\nimport { useFormikContext } from 'formik'\n\nimport Colors from './colors'\n\nexport default function FormSwitch({\n  name,\n  title,\n  onChange = (x) => x,\n  ...otherProps\n}) {\n  const { values, setFieldValue } = useFormikContext()\n  const value = values[name]\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{title}</Text>\n      <Switch\n        value={value}\n        onValueChange={(value) => {\n          onChange(value)\n          setFieldValue(name, value)\n        }}\n        {...otherProps}\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  title: {\n    color: Colors.white,\n    fontSize: 18,\n    fontWeight: '600',\n    marginRight: 5,\n  },\n})\n","import Base from './Forms/Form'\nimport FormField from './Forms/FormField'\nimport FormButton from './Forms/FormButton'\nimport FormErrorMessage from './Forms/FormErrorMessage'\nimport FormSwitch from './Forms/FormSwitch'\n\nconst Form = (props) => Base(props)\n\nForm.Field = FormField\nForm.Button = FormButton\nForm.ErrorMessage = FormErrorMessage\nForm.Switch = FormSwitch\n\nexport default Form\n","import React from 'react'\nimport { Formik } from 'formik'\n\nexport default function Form({\n  children,\n  initialValues,\n  onSubmit,\n  validationSchema,\n}) {\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {() => <React.Fragment>{children}</React.Fragment>}\n    </Formik>\n  )\n}\n","import React from 'react'\nimport { useFormikContext } from 'formik'\n\nimport FormErrorMessage from './FormErrorMessage'\nimport FormTextInput from './FormTextInput'\n\nexport default function FormField({ name, width, ...otherProps }) {\n  const { setFieldTouched, setFieldValue, values, errors, touched } =\n    useFormikContext()\n\n  return (\n    <React.Fragment>\n      <FormTextInput\n        value={values[name]}\n        onChangeText={(text) => setFieldValue(name, text)}\n        onBlur={() => setFieldTouched(name)}\n        width={width}\n        {...otherProps}\n      />\n      <FormErrorMessage error={errors[name]} visible={touched[name]} />\n    </React.Fragment>\n  )\n}\n","export const taskBase = {\n  title: '',\n  description: '',\n  dateCreated: '',\n  dateModified: '',\n  dateDue: '',\n  status: 'Incomplete',\n  owner: '',\n  comments: '',\n  notifications: '',\n  resources: '',\n}\n","import React, { useState } from 'react'\nimport { SafeAreaView, StyleSheet, Text, TouchableOpacity } from 'react-native'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport Form from '../components/Form'\nimport { firebase } from '../firebase'\nimport { taskBase } from '../utils/taskBase'\n\nconst CreateTaskScreen = ({ navigation, route }) => {\n  const [submitted, setSubmitted] = useState(false)\n  const [submitError, setSubmitError] = useState('')\n\n  const thisUser = route.params.thisUser\n  const userId = thisUser.id\n  const prebuiltTask = route.params.prebuiltTask\n\n  // Update the 'newTask' variable based on user input\n  async function handleSubmit(values) {\n    const date = Date()\n    const newTask = {\n      ...values,\n      dateCreated: date,\n      dateModified: date,\n      status: 'Incomplete',\n      owner: userId,\n    }\n\n    firebase\n      .database()\n      .ref(`users/${userId}/tasks/${Date.now()}`)\n      .set(newTask)\n      .catch((error) => {\n        setSubmitError(error.message)\n      })\n  }\n\n  return !submitted ? (\n    <SafeAreaView style={styles.container}>\n      <Text label=\"Name\" style={styles.name}>\n        Post a new task!\n      </Text>\n      <ScrollView>\n        <Form\n          initialValues={{\n            ...taskBase,\n            ...prebuiltTask,\n          }}\n          onSubmit={(values) => {\n            setSubmitted(true)\n            handleSubmit(values)\n          }}\n        >\n          <Form.Field\n            name=\"title\"\n            placeholder=\"Enter task name\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"description\"\n            placeholder=\"Enter task description\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"dateDue\"\n            placeholder=\"Enter due date for this task\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Button title={'Add new task'} />\n          <Form.ErrorMessage error={submitError} />\n        </Form>\n      </ScrollView>\n    </SafeAreaView>\n  ) : (\n    <SafeAreaView style={styles.container}>\n      <Text style={styles.h1_text}>Task successfully created!</Text>\n      <TouchableOpacity\n        style={styles.addTaskButton}\n        onPress={() => navigation.navigate('MainTasksScreen', { thisUser })} // Pass new task to 'MainTasksScreen.js'\n      >\n        <Text style={styles.buttonText}>Return to Home Screen</Text>\n      </TouchableOpacity>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  addTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  container: {\n    flex: 1,\n    marginTop: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: '90%',\n  },\n  h1_text: {\n    fontSize: 48,\n    marginBottom: 25,\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  field: {\n    padding: 5,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 18,\n  },\n  fieldContainer: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  label: {\n    fontWeight: 'bold',\n  },\n  name: {\n    fontSize: 24,\n    marginBottom: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  connectButton: {\n    margin: 30,\n    padding: 10,\n    textAlign: 'center',\n    backgroundColor: 'lightblue',\n  },\n  connectText: {\n    fontSize: 22,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    // fontWeight: 500,\n  },\n  roleButton: {\n    backgroundColor: '#2196F3',\n    fontSize: 16,\n    width: 250,\n    padding: 15,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'black',\n    textAlign: 'center',\n  },\n})\n\nexport default CreateTaskScreen\n","import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native'\n\n// TODO (L11): conditional styling?\n\nconst UserProfile = ({ user, view }) => (\n  <TouchableOpacity style={{ height: 60 }} onPress={() => view(user)}>\n    <View style={styles.container}>\n      <Text style={styles.title}>{user.patientInfo.name}</Text>\n    </View>\n  </TouchableOpacity>\n)\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    marginTop: 20,\n    paddingTop: 5,\n    paddingBottom: 5,\n    //paddingLeft: 10,\n    //paddingRight: 75,\n    width: '100%',\n    height: '10%',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 5,\n  },\n  title: {\n    ...row,\n    fontWeight: '500',\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n})\n\nexport default UserProfile\n","import React, { useState, useEffect } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport UserProfile from '../components/UserProfile'\nimport { firebase } from '../firebase'\n\nconst ViewPatientsScreen = ({ navigation }) => {\n  const view = (user) => {\n    navigation.navigate('MainTasksScreen', { user: user })\n  }\n\n  const [userList, setUserList] = useState([])\n\n  useEffect(() => {\n    const db = firebase.database().ref('users')\n    const handleData = (snap) => {\n      if (snap.val()) {\n        const users = snap.val()\n        setUserList(Object.keys(users).map((key) => users[key]))\n      }\n    }\n    db.on('value', handleData, (error) => console.log(error))\n    return () => db.off('value', handleData)\n  }, [])\n\n  return (\n    <View style={styles.container}>\n      {userList.map((user, idx) => (\n        <UserProfile key={idx} user={user} view={view} />\n      ))}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default ViewPatientsScreen\n","export const PrebuiltTaskArray = {\n  tasks: [\n    {\n      title: 'I need a Handicap Vehicle Permit',\n      description: 'Please order or renew handicap vehicle permit.',\n    },\n    {\n      title: 'I need a new blood glucose meter',\n      description: 'Please send a prescription for a new glucometer.',\n    },\n    {\n      title: 'What is the best diet for me?',\n      description:\n        'Please give me information on the most appropriate diet for me.',\n    },\n    {\n      title: 'I need help trimming my toenails.',\n      description: 'Please schedule me an appointment with podiatry.',\n    },\n    {\n      title: 'What can I take for my seasonal allergies?',\n      description:\n        'Please send me a list of over-the-counter medications that are safe for me to take.',\n    },\n  ],\n}\n","import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native'\n\nconst PrebuiltTask = ({ prebuiltTask, view }) => (\n  <TouchableOpacity style={{ height: 60 }} onPress={() => view(prebuiltTask)}>\n    <View style={styles.container}>\n      <Text style={styles.title}>{prebuiltTask.title}</Text>\n    </View>\n  </TouchableOpacity>\n)\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    alignItems: 'flex-start',\n    marginTop: 20,\n    paddingTop: 5,\n    paddingBottom: 5,\n    width: '100%',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 5,\n  },\n  title: {\n    ...row,\n    fontWeight: '500',\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n})\n\nexport default PrebuiltTask\n","import React from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native'\nimport { PrebuiltTaskArray } from '../utils/dataTask'\nimport PrebuiltTask from '../components/PrebuiltTask'\n\nconst PrebuiltTaskScreen = ({ navigation, route }) => {\n  const view = (prebuiltTask) => {\n    navigation.navigate('CreateTaskScreen', { thisUser, prebuiltTask })\n  }\n\n  const thisUser = route.params.thisUser\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => {\n          return navigation.navigate('CreateTaskScreen', {\n            thisUser,\n          })\n        }}\n        style={styles.newTaskButton}\n      >\n        <Text style={styles.title}>Create Blank Task</Text>\n      </TouchableOpacity>\n      <View style={styles.container}>\n        {PrebuiltTaskArray.tasks.map((prebuiltTask, idx) => (\n          <PrebuiltTask key={idx} prebuiltTask={prebuiltTask} view={view} />\n        ))}\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default PrebuiltTaskScreen\n","import React, { useState } from 'react'\nimport { SafeAreaView, StyleSheet, Text } from 'react-native'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport Form from '../components/Form'\nimport { firebase } from '../firebase'\n\nconst EditTaskScreen = ({ navigation, route }) => {\n  const [submitError, setSubmitError] = useState('')\n  const task = route.params.task\n  const thisUser = route.params.thisUser\n  const userId = thisUser.id\n\n  // Update the 'newTask' variable based on user input\n  async function handleSubmit(values) {\n    const newTask = {\n      ...values,\n      dateModified: Date(),\n      status: 'Incomplete',\n    }\n\n    firebase\n      .database()\n      .ref(`users/${userId}/tasks/${task.id}`)\n      .set(newTask)\n      .catch((error) => {\n        setSubmitError(error.message)\n      })\n\n    navigation.navigate('TaskDetailScreen', { task: newTask, thisUser })\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text label=\"Name\" style={styles.name}>\n        Task Edit Screen\n      </Text>\n      <ScrollView>\n        <Form\n          initialValues={{\n            ...task,\n          }}\n          onSubmit={(values) => {\n            handleSubmit(values)\n          }}\n        >\n          <Form.Field\n            name=\"title\"\n            placeholder=\"Enter task name\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"description\"\n            placeholder=\"Enter task description\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"dateDue\"\n            placeholder=\"Enter due date for this task\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Button title={'Save changes'} />\n          <Form.ErrorMessage error={submitError} />\n        </Form>\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  addTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  container: {\n    flex: 1,\n    marginTop: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: '90%',\n  },\n  h1_text: {\n    fontSize: 48,\n    marginBottom: 25,\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  field: {\n    padding: 5,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 18,\n  },\n  fieldContainer: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  label: {\n    fontWeight: 'bold',\n  },\n  name: {\n    fontSize: 24,\n    marginBottom: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  connectButton: {\n    margin: 30,\n    padding: 10,\n    textAlign: 'center',\n    backgroundColor: 'lightblue',\n  },\n  connectText: {\n    fontSize: 22,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    // fontWeight: 500,\n  },\n  roleButton: {\n    backgroundColor: '#2196F3',\n    fontSize: 16,\n    width: 250,\n    padding: 15,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'black',\n    textAlign: 'center',\n  },\n})\n\nexport default EditTaskScreen\n","import React, {useEffect, useState} from 'react'\nimport {\n  StatusBar,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView\n} from 'react-native'\nimport { firebase } from '../firebase'\n\nconst MessageField = ({ message }) => {\n    return (\n      <View style={styles.fieldContainer}>\n        <Text style={styles.fieldText}>{message}</Text>\n        {/* <Text style={styles.field}>{value}</Text> */}\n      </View>\n    )\n  }\n  \n  \nconst RenderMessages = (messages) => {\n    return (\n      <ScrollView>\n        {Object.values(messages)[0].map((message) => (\n          <MessageField message={message} />\n        ))}\n      </ScrollView>\n    )\n  }\n\n  \n\n// View message screen\nconst ViewMessagesScreen = ({ navigation, route }) => {\n\n    const task = route.params.task\n    const thisUser = route.params.thisUser\n    const userId = thisUser.id\n  \n    const [messages, setMessages] = useState([])\n\n\n    useEffect(() => {\n        const db = firebase.database().ref(`users/${userId}/tasks/${task.id}/comments`)\n        const handleData = (snap) => {\n          if (snap.val()) {\n            const val = snap.val()\n            const messageList = Object.values(val)\n            setMessages(messageList)\n            console.log(messageList)\n          }\n        }\n        db.on('value', handleData, (error) => console.log(error))\n        return () => db.off('value', handleData)\n      }, [])\n\n  return (\n    <View style={styles.container}>\n     \n      <View>\n            <RenderMessages messages={messages}></RenderMessages>\n      </View>\n\n      <StatusBar style=\"auto\" />\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    paddingTop: 30,\n    // justifyContent: 'center',\n  },\n\n  userContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  fieldContainer: {\n      borderWidth: 1,\n      borderRadius: 5,\n      padding: 15,\n      margin: 5,\n  },\n  fieldText: {\n    marginBottom: 10,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  roleButton: {\n    backgroundColor: '#2196F3',\n    fontSize: 16,\n    margin: 15,\n    width: 250,\n    padding: 15,\n    textAlign: 'center',\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'ghostwhite',\n    textAlign: 'center',\n  },\n})\n\nexport default ViewMessagesScreen\n","import React from 'react'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { StyleSheet } from 'react-native'\nimport { NavigationContainer } from '@react-navigation/native'\nimport MainTasksScreen from './screens/MainTasksScreen'\nimport TaskDetailScreen from './screens/TaskDetailScreen'\nimport CreateTaskScreen from './screens/CreateTaskScreen'\nimport ViewPatientsScreen from './screens/ViewPatientsScreen'\nimport PrebuiltTaskScreen from './screens/PrebuiltTaskScreen'\nimport EditTaskScreen from './screens/EditTaskScreen'\nimport ViewMessagesScreen from './screens/ViewMessagesScreen'\n\nconst Stack = createStackNavigator()\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={{\n          headerStyle: {\n            backgroundColor: '#610f94', // some purple color lol\n          },\n          headerTintColor: 'white',\n          headerTitleStyle: {\n            alignSelf: 'center',\n            fontWeight: 'bold',\n          },\n          headerTitleContainerStyle: {\n            left: 0,\n          },\n        }}\n      >\n        <Stack.Screen\n          name=\"ViewPatientsScreen\"\n          component={ViewPatientsScreen}\n          options={{ title: 'Your Patients' }}\n        />\n        <Stack.Screen\n          name=\"MainTasksScreen\"\n          component={MainTasksScreen}\n          options={{ title: 'Main Tasks' }}\n        />\n        <Stack.Screen\n          name=\"PrebuiltTaskScreen\"\n          component={PrebuiltTaskScreen}\n          options={{ title: 'Choose from Pre-Created Tasks' }}\n        />\n        <Stack.Screen\n          name=\"CreateTaskScreen\"\n          component={CreateTaskScreen}\n          options={{ title: 'Create New Task' }}\n        />\n        <Stack.Screen\n          name=\"TaskDetailScreen\"\n          component={TaskDetailScreen}\n          options={{ title: 'Task Details' }}\n        />\n        <Stack.Screen\n          name=\"ViewMessagesScreen\"\n          component={ViewMessagesScreen}\n          options={{ title: 'View Messages' }}\n        />\n        <Stack.Screen\n          name=\"EditTaskScreen\"\n          component={EditTaskScreen}\n          options={{ title: 'Edit Task' }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n"],"sourceRoot":""}