{"version":3,"sources":["components/Task.js","components/TaskList.js","firebase.js","screens/MainTasksScreen.js","screens/TaskDetailScreen.js","components/Forms/colors.js","components/Forms/FormErrorMessage.js","components/Forms/FormTextInput.js","components/Forms/FormButton.js","components/Forms/FormSwitch.js","components/Form.js","components/Forms/Form.js","components/Forms/FormField.js","utils/taskBase.js","screens/CreateTaskScreen.js","components/UserProfile.js","screens/ViewPatientsScreen.js","utils/dataTask.js","components/PrebuiltTask.js","screens/PrebuiltTaskScreen.js","screens/EditTaskScreen.js","screens/ViewMessagesScreen.js","screens/CreateMessageScreen.js","screens/AppViewScreen.js","screens/RegisterScreen.js","UserContext.js","App.js"],"names":["row","fontSize","marginLeft","marginRight","containerStyle","display","flexDirection","alignItems","marginTop","paddingTop","paddingBottom","width","borderWidth","borderColor","borderRadius","styles","StyleSheet","create","container","backgroundColor","complete","title","fontWeight","dateDue","fontStyle","incompleteStatus","color","completeStatus","urgencyStatus","urgencyView","flex","textView","Task","task","view","TouchableOpacity","onPress","View","style","status","Text","urgency","maxWidth","TaskList","tasks","ScrollView","map","idx","key","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","justifyContent","newTaskButton","textAlign","padding","shadowOffset","height","shadowColor","shadowOpacity","MainTasksScreen","navigation","userId","route","params","user","id","useState","thisUser","setThisUser","useEffect","db","database","ref","handleData","snap","val","patient","taskArray","Object","keys","push","taskList","fixPatientTasks","on","error","console","log","off","navigate","buttonColor","margin","statusContainer","paddingLeft","paddingRight","marginBottom","description","resource","textDecorationLine","date","owner","tempContainer","bottomButtonContainer","whiteButtonColor","purpleButtonColor","lightPurpleButtonColor","redButtonColor","redStatusText","greenStatusText","blackButtonText","whiteButtonText","TaskDetailScreen","handleComplete","wantToMarkComplete","a","async","newTask","set","catch","setSubmitError","message","dateCreated","resources","Linking","openURL","testID","remove","primary","secondary","black","white","ghostWhite","lightGrey","mediumGrey","red","lightPurple","FormErrorMessage","visible","errorText","Colors","FormTextInput","leftIcon","rightIcon","handlePasswordVisibility","otherProps","MaterialCommunityIcons","name","size","icon","TextInput","input","placeholderTextColor","rightIconStyles","marginVertical","alignSelf","button","buttonText","textTransform","Form","props","children","initialValues","onSubmit","validationSchema","Fragment","Base","Field","useFormikContext","setFieldTouched","setFieldValue","values","errors","touched","value","onChangeText","text","onBlur","Button","handleSubmit","ErrorMessage","Switch","onChange","x","onValueChange","taskBase","dateModified","comments","notifications","addTaskButton","h1_text","field","fieldContainer","label","connectButton","connectText","roleButton","CreateTaskScreen","submitted","setSubmitted","submitError","prebuiltTask","parseDateCreated","Date","getMonth","getDate","getYear","SafeAreaView","now","placeholder","autoCapitalize","UserProfile","patientInfo","ViewPatientsScreen","role","roles","userList","setUserList","users","PrebuiltTaskArray","buttonContainer","PrebuiltTask","container2","PrebuiltTaskScreen","EditTaskScreen","MessageField","fieldText","RenderMessages","messages","length","userContainer","ViewMessagesScreen","setMessages","messageList","StatusBar","developerImage","CreateMessageScreen","messageSent","setMessageSent","child","autoFocus","multiline","numberOfLines","h3_text","h4_text","AppViewScreen","h1","h3","Yup","shape","email","required","password","min","confirm","oneOf","shadowRadius","elevation","RegisterScreen","signInError","setSignInError","handleOnLogin","auth","signInWithEmailAndPassword","handleOnSignUp","createUserWithEmailAndPassword","authCredential","updateProfile","displayName","confirmPassword","keyboardType","textContentType","autoCorrect","secureTextEntry","UserContext","createContext","Stack","createStackNavigator","LogoutButton","signOut","App","setUser","setAuth","uid","alert","onAuthStateChanged","Provider","NavigationContainer","Navigator","screenOptions","headerStyle","headerTintColor","headerTitleStyle","headerTitleContainerStyle","left","right","Screen","component","options","headerRight"],"mappings":"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","file":"static/js/app.8f32b088.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  PickerIOSComponent,\n} from 'react-native'\n\nconst Task = ({ task, view }) => {\n  return (\n    <TouchableOpacity onPress={() => view(task)}>\n      <View\n        style={task.status === 'Complete' ? styles.complete : styles.container}\n      >\n        <View style={styles.textView}>\n          <Text style={styles.title}>{task.title}</Text>\n          <Text style={styles.dateDue}>Due: {task.dateDue}</Text>\n        </View>\n        <View style={styles.urgencyView}>\n          <Text style={styles.urgencyStatus}>\n            {task.urgency === 1 ? '❗️' : ''}{' '}\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst containerStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'flex-start',\n  marginTop: 20,\n  paddingTop: 5,\n  paddingBottom: 5,\n  width: '100%',\n  borderWidth: 1,\n  borderColor: 'black',\n  borderRadius: 5,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    ...containerStyle,\n    backgroundColor: '#fff',\n  },\n  complete: {\n    ...containerStyle,\n    backgroundColor: 'gray',\n  },\n  title: {\n    ...row,\n    fontWeight: '500',\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n  urgencyStatus: {\n    ...row,\n    color: 'red',\n    fontSize: 32,\n  },\n  urgencyView: {\n    ...row,\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-end',\n  },\n  textView: {\n    ...row,\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    width: '65%',\n    color: 'red',\n  },\n})\n\nexport default Task\n","import React from 'react'\nimport { ScrollView, StyleSheet } from 'react-native'\nimport Task from './Task'\n\nconst TaskList = ({ tasks, view }) => (\n  <ScrollView style={styles.container}>\n    {tasks.map((task, idx) => (\n      <Task key={idx} task={task} view={view} />\n    ))}\n  </ScrollView>\n)\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '85%',\n    maxWidth: 800,\n  },\n})\n\nexport default TaskList\n","import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCfQWvGnwih9JFpyL0ypAswUMSdEyD8AdE\",\n    authDomain: \"myelinapp-513fb.firebaseapp.com\",\n    databaseURL: \"https://myelinapp-513fb-default-rtdb.firebaseio.com\",\n    projectId: \"myelinapp-513fb\",\n    storageBucket: \"myelinapp-513fb.appspot.com\",\n    messagingSenderId: \"936159143445\",\n    appId: \"1:936159143445:web:2b03711a46dc9022f9501c\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport { firebase };","import React, { useEffect, useState } from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native'\nimport TaskList from '../components/TaskList'\nimport { firebase } from '../firebase'\n\nconst fixPatientTasks = (patient) => {\n  const taskArray = []\n  Object.keys(patient.tasks).map((key) => {\n    const task = patient.tasks[key]\n    task['id'] = key\n    taskArray.push(task)\n  })\n  return {\n    ...patient,\n    taskList: taskArray,\n  }\n}\n\nconst MainTasksScreen = ({ navigation, route }) => {\n  const userId = route.params.user.id\n  const [thisUser, setThisUser] = useState(null)\n\n  const view = (task) => {\n    navigation.navigate('TaskDetailScreen', { task, thisUser })\n  }\n\n  useEffect(() => {\n    const db = firebase.database().ref(`users/${userId}`)\n    const handleData = (snap) => {\n      if (snap.val()) setThisUser(fixPatientTasks(snap.val()))\n    }\n    db.on('value', handleData, (error) => console.log(error))\n    return () => {\n      db.off('value', handleData)\n    }\n  }, [])\n\n  return thisUser ? (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => navigation.navigate('PrebuiltTaskScreen', { thisUser })}\n        style={styles.newTaskButton}\n      >\n        <Text style={styles.title}>Create a New Task!</Text>\n      </TouchableOpacity>\n      <TaskList tasks={thisUser.taskList} view={view} />\n    </View>\n  ) : (\n    <View style={styles.container}>\n      <Text>Loading...</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default MainTasksScreen\n","import React from 'react'\nimport { Text, View, StyleSheet, Linking, Button, TouchableOpacity } from 'react-native'\nimport { firebase } from '../firebase'\n\nconst TaskDetailScreen = ({ navigation, route }) => {\n  const task = route.params.task\n  const thisUser = route.params.thisUser\n  const userId = thisUser.id\n\n  async function handleComplete(wantToMarkComplete) {\n    const newTask = { ...task }\n\n    newTask.status = wantToMarkComplete ? 'Complete' : 'Incomplete'\n\n    firebase\n      .database()\n      .ref(`users/${userId}/tasks/${task.id}`)\n      .set(newTask)\n      .catch((error) => {\n        setSubmitError(error.message)\n      })\n\n    navigation.navigate('MainTasksScreen', { thisUser })\n  }\n\n  async function handleDelete() {\n    firebase\n      .database()\n      .ref(`users/${userId}/tasks/${task.id}`)\n      .remove()\n      .catch((error) => {\n        setSubmitError(error.message)\n      })\n\n    navigation.navigate('MainTasksScreen', { thisUser })\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{task.title}</Text>\n      <Text style={styles.date}>\n        Created: {task.dateCreated} | Due: {task.dateDue}\n      </Text>\n      <Text style={styles.owner}>- {task.owner} -</Text>\n      <Text style={styles.description}>{task.description}</Text>\n      {task.resources != '' && (\n        <Text\n          style={styles.resource}\n          onPress={() => Linking.openURL(task.resources)}\n        >\n          {task.resources}\n        </Text>\n      )}\n\n      <View style={styles.statusContainer}>\n        <Text\n          style={\n            task.status === 'Complete'\n              ? [styles.greenStatusText, {fontWeight: 'bold'}]\n              : [styles.redStatusText, {fontWeight: 'bold'}]\n          }\n        >\n          {task.status}\n        </Text>\n      </View>\n\n      <TouchableOpacity \n        style={styles.lightPurpleButtonColor} \n        onPress={() =>\n          navigation.navigate('EditTaskScreen', { task, thisUser })\n        }\n      >\n        <Text style={styles.blackButtonText}>Edit Task</Text>\n      </TouchableOpacity>\n      <TouchableOpacity \n        style={styles.lightPurpleButtonColor} \n        onPress={() =>\n          navigation.navigate('ViewMessagesScreen', { task, thisUser })\n        }\n        testID=\"TaskDetail.ViewMessages\"\n      >\n        <Text style={styles.blackButtonText}>View Message Board</Text>\n      </TouchableOpacity>\n        {task.status === 'Complete' ? (\n            <TouchableOpacity \n              style={styles.whiteButtonColor} \n              onPress={() => handleComplete(false)}\n            >\n              <Text style={styles.redStatusText}>Mark Task As Incomplete</Text>\n            </TouchableOpacity>\n        ) : (\n            <TouchableOpacity \n              style={styles.whiteButtonColor} \n              onPress={() => handleComplete(true)}\n              testID=\"TaskDetail.Complete\"\n            >\n              <Text style={styles.greenStatusText}>Mark Task As Complete</Text>\n            </TouchableOpacity>\n        )}\n\n          <TouchableOpacity \n            style={styles.redButtonColor} \n            onPress={() => handleDelete()}\n          >\n            <Text style={styles.whiteButtonText}>Delete Task</Text>\n          </TouchableOpacity>\n      </View>\n  )\n}\n\nconst buttonColor = {\n  borderWidth: 1,\n  borderColor: 'black',\n  textAlign: 'center',\n  shadowOffset: { width: 1, height: 1 },\n  shadowColor: 'black',\n  shadowOpacity: 1.0,\n  padding: 10,\n  margin: 10,\n  width: '70%',\n  maxWidth: 800,\n  height: 40,\n  justifyContent: 'center',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  statusContainer: {\n    backgroundColor: 'white',\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 75,\n    paddingRight: 75,\n    borderWidth: 1,\n    borderColor: 'black',\n    marginBottom: 15,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '500',\n  },\n  description: {\n    fontSize: 16,\n    marginBottom: 10,\n  },\n  resource: {\n    fontSize: 16,\n    marginBottom: 10,\n    color: 'blue',\n    textDecorationLine: 'underline',\n  },\n  date: {\n    fontSize: 14,\n    fontStyle: 'italic',\n    marginBottom: 5,\n  },\n  owner: {\n    marginBottom: 30,\n  },\n  tempContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    width: '70%', \n    maxWidth: 800,\n  }, \n  bottomButtonContainer: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n  whiteButtonColor: {\n    ...buttonColor,\n    backgroundColor: 'white',\n  },\n  purpleButtonColor: {\n    ...buttonColor,\n    backgroundColor: 'purple',\n  },\n  lightPurpleButtonColor: {\n    ...buttonColor,\n    backgroundColor: '#c3a6ff',\n  },\n  redButtonColor: {\n    ...buttonColor,\n    backgroundColor: '#db4d4d',\n  },\n  redStatusText: {\n    fontSize: 16,\n    color: 'red',\n  },\n  greenStatusText: {\n    fontSize: 16,\n    color: 'green',\n  },\n  blackButtonText: {\n    color: 'black',\n    fontSize: 18,\n  },\n  whiteButtonText: {\n    color: 'white',\n    fontSize: 18,\n  },\n})\n\nexport default TaskDetailScreen\n","export default {\n  primary: 'lightblue',\n  secondary: '#039be5',\n  black: '#222222',\n  white: '#ffffff',\n  ghostWhite: '#f8f8ff',\n  lightGrey: '#f9f9f9',\n  mediumGrey: '#6e6869',\n  red: '#fc5c65',\n  lightPurple: '#c3a6ff',\n}\n","import React from 'react'\nimport { StyleSheet, Text } from 'react-native'\n\nimport Colors from './colors'\n\nexport default function FormErrorMessage({ error, visible }) {\n  if (!error || !visible) {\n    return null\n  }\n\n  return <Text style={styles.errorText}>{error}</Text>\n}\n\nconst styles = StyleSheet.create({\n  errorText: {\n    marginLeft: 15,\n    color: Colors.red,\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: '600',\n  },\n})\n","import React from 'react'\nimport { View, StyleSheet, TextInput, TouchableOpacity } from 'react-native'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\n\nimport Colors from './colors'\n\nexport default function FormTextInput({\n  leftIcon,\n  width = '100%',\n  rightIcon,\n  handlePasswordVisibility,\n  ...otherProps\n}) {\n  return (\n    <View style={[styles.container, { width }]}>\n      {leftIcon && (\n        <MaterialCommunityIcons\n          name={leftIcon}\n          size={20}\n          color={Colors.mediumGrey}\n          style={styles.icon}\n        />\n      )}\n      <TextInput\n        style={styles.input}\n        placeholderTextColor={Colors.mediumGrey}\n        {...otherProps}\n      />\n      {rightIcon && (\n        <TouchableOpacity onPress={handlePasswordVisibility}>\n          <MaterialCommunityIcons\n            name={rightIcon}\n            size={20}\n            color={Colors.mediumGrey}\n            style={styles.rightIconStyles}\n          />\n        </TouchableOpacity>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.lightGrey,\n    borderRadius: 25,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    padding: 15,\n    marginVertical: 10,\n  },\n  icon: {\n    marginRight: 10,\n  },\n  input: {\n    flex: 1,\n    width: '100%',\n    fontSize: 18,\n    color: Colors.black,\n  },\n  rightIconStyles: {\n    alignSelf: 'center',\n    marginLeft: 10,\n  },\n})\n","import React from 'react'\nimport { Text, TouchableOpacity, StyleSheet } from 'react-native'\nimport { useFormikContext } from 'formik'\n\nimport Colors from './colors'\n\nexport default function FormButton({ title, onPress, color = 'lightPurple' }) {\n  const { handleSubmit, values } = useFormikContext()\n  const onPressAndSubmit = () => {\n    if (onPress) {\n      onPress()\n    }\n    handleSubmit()\n  }\n  const text = typeof title === 'function' ? title(values) : title\n\n  return (\n    <TouchableOpacity\n      style={[styles.button, { backgroundColor: Colors[color] }]}\n      onPress={onPressAndSubmit}\n    >\n      <Text style={styles.buttonText}>{text}</Text>\n    </TouchableOpacity>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  buttonText: {\n    color: Colors.black,\n    fontSize: 18,\n    fontWeight: '600',\n    textTransform: 'uppercase',\n  },\n})\n","import React from 'react'\nimport { StyleSheet, Switch, Text, View } from 'react-native'\nimport { useFormikContext } from 'formik'\n\nimport Colors from './colors'\n\nexport default function FormSwitch({\n  name,\n  title,\n  onChange = (x) => x,\n  ...otherProps\n}) {\n  const { values, setFieldValue } = useFormikContext()\n  const value = values[name]\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{title}</Text>\n      <Switch\n        value={value}\n        onValueChange={(value) => {\n          onChange(value)\n          setFieldValue(name, value)\n        }}\n        {...otherProps}\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  title: {\n    color: Colors.white,\n    fontSize: 18,\n    fontWeight: '600',\n    marginRight: 5,\n  },\n})\n","import Base from './Forms/Form'\nimport FormField from './Forms/FormField'\nimport FormButton from './Forms/FormButton'\nimport FormErrorMessage from './Forms/FormErrorMessage'\nimport FormSwitch from './Forms/FormSwitch'\n\nconst Form = (props) => Base(props)\n\nForm.Field = FormField\nForm.Button = FormButton\nForm.ErrorMessage = FormErrorMessage\nForm.Switch = FormSwitch\n\nexport default Form\n","import React from 'react'\nimport { Formik } from 'formik'\n\nexport default function Form({\n  children,\n  initialValues,\n  onSubmit,\n  validationSchema,\n}) {\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {() => <React.Fragment>{children}</React.Fragment>}\n    </Formik>\n  )\n}\n","import React from 'react'\nimport { useFormikContext } from 'formik'\n\nimport FormErrorMessage from './FormErrorMessage'\nimport FormTextInput from './FormTextInput'\n\nexport default function FormField({ name, width, ...otherProps }) {\n  const { setFieldTouched, setFieldValue, values, errors, touched } =\n    useFormikContext()\n\n  return (\n    <React.Fragment>\n      <FormTextInput\n        value={values[name]}\n        onChangeText={(text) => setFieldValue(name, text)}\n        onBlur={() => setFieldTouched(name)}\n        width={width}\n        {...otherProps}\n      />\n      <FormErrorMessage error={errors[name]} visible={touched[name]} />\n    </React.Fragment>\n  )\n}\n","export const taskBase = {\n  title: '',\n  description: '',\n  dateCreated: '',\n  dateModified: '',\n  dateDue: '',\n  status: 'Incomplete',\n  owner: '',\n  comments: '',\n  notifications: '',\n  resources: '',\n}\n","import React, { useState } from 'react'\nimport { SafeAreaView, StyleSheet, Text, TouchableOpacity } from 'react-native'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport Form from '../components/Form'\nimport { firebase } from '../firebase'\nimport { taskBase } from '../utils/taskBase'\n\nconst CreateTaskScreen = ({ navigation, route }) => {\n  const [submitted, setSubmitted] = useState(false)\n  const [submitError, setSubmitError] = useState('')\n\n  const thisUser = route.params.thisUser\n  const userId = thisUser.id\n  const prebuiltTask = route.params.prebuiltTask\n\n  // Update the 'newTask' variable based on user input\n  async function handleSubmit(values) {\n    const newTask = {\n      ...values,\n      dateCreated: parseDateCreated(),\n      dateModified: parseDateCreated(),\n      status: 'Incomplete',\n      owner: userId,\n    }\n\n    firebase\n      .database()\n      .ref(`users/${userId}/tasks/${Date.now()}`)\n      .set(newTask)\n      .catch((error) => {\n        setSubmitError(error.message)\n      })\n  }\n\n  // Parse date from long string to standard mm/dd/yy format\n  const parseDateCreated = () => {\n    const date = new Date()\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    const year = date.getYear() - 100\n\n    const dateString = month + \"/\" + day + \"/\" + year\n    return dateString\n  }\n\n  return !submitted ? (\n    <SafeAreaView style={styles.container}>\n      <Text label=\"Name\" style={styles.name}>\n        Post a new task!\n      </Text>\n      <ScrollView>\n        <Form\n          initialValues={{\n            ...taskBase,\n            ...prebuiltTask,\n          }}\n          onSubmit={(values) => {\n            setSubmitted(true)\n            handleSubmit(values)\n          }}\n        >\n          <Form.Field\n            name=\"title\"\n            placeholder=\"Enter task name\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"description\"\n            placeholder=\"Enter task description\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"dateDue\"\n            placeholder=\"Enter due date for this task\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Button title={'Add new task'} />\n          <Form.ErrorMessage error={submitError} />\n        </Form>\n      </ScrollView>\n    </SafeAreaView>\n  ) : (\n    <SafeAreaView style={styles.container}>\n      <Text style={styles.h1_text}>Task successfully created!</Text>\n      <TouchableOpacity\n        style={styles.addTaskButton}\n        onPress={() => navigation.navigate('MainTasksScreen', { thisUser })}\n      >\n        <Text style={styles.buttonText}>Return to Home Screen</Text>\n      </TouchableOpacity>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  addTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset: { width: 1, height: 1 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  container: {\n    flex: 1,\n    marginTop: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: '90%',\n  },\n  h1_text: {\n    fontSize: 48,\n    marginBottom: 25,\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  field: {\n    padding: 5,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 18,\n  },\n  fieldContainer: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  label: {\n    fontWeight: 'bold',\n  },\n  name: {\n    fontSize: 24,\n    marginBottom: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  connectButton: {\n    margin: 30,\n    padding: 10,\n    textAlign: 'center',\n    backgroundColor: 'lightblue',\n  },\n  connectText: {\n    fontSize: 22,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  roleButton: {\n    backgroundColor: '#2196F3',\n    fontSize: 16,\n    width: 250,\n    padding: 15,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'black',\n    textAlign: 'center',\n  },\n})\n\nexport default CreateTaskScreen\n","import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native'\n\nconst UserProfile = ({ user, view }) => (\n  <TouchableOpacity style={{ width: 350 }} onPress={() => view(user)}>\n    <View style={[styles.container, {textAlign: 'center'}]}>\n      <Text style={styles.title}>{user.patientInfo.name}</Text>\n    </View>\n  </TouchableOpacity>\n)\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    marginTop: 20,\n    paddingTop: 5,\n    paddingBottom: 5,\n    width: '100%',\n    height: '10%',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 5,\n  },\n  title: {\n    ...row,\n    fontWeight: '500',\n    fontSize:24\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n})\n\nexport default UserProfile\n","import React, { useState, useEffect } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport UserProfile from '../components/UserProfile'\nimport { firebase } from '../firebase'\n\nconst ViewPatientsScreen = ({ navigation }) => {\n  const view = (user) => {\n    navigation.navigate('MainTasksScreen', { user: user, role: roles })\n  }\n\n  const [userList, setUserList] = useState([])\n\n  const [roles, setUserRole] = useState('careTeam')\n\n  useEffect(() => {\n    const db = firebase.database().ref('users')\n    const handleData = (snap) => {\n      if (snap.val()) {\n        const users = snap.val()\n        setUserList(Object.keys(users).map((key) => users[key]))\n      }\n    }\n    db.on('value', handleData, (error) => console.log(error))\n    return () => db.off('value', handleData)\n  }, [])\n\n  return (\n    <View style={styles.container}>\n      {userList.map((user, idx) => (\n        <UserProfile key={idx} user={user} view={view} />\n      ))}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 10,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default ViewPatientsScreen\n","export const PrebuiltTaskArray = {\n  tasks: [\n    {\n      title: 'I need a Handicap Vehicle Permit',\n      description: 'Please order or renew handicap vehicle permit.',\n    },\n    {\n      title: 'I need a new blood glucose meter',\n      description: 'Please send a prescription for a new glucometer.',\n    },\n    {\n      title: 'What is the best diet for me?',\n      description:\n        'Please give me information on the most appropriate diet for me.',\n    },\n    {\n      title: 'I need help trimming my toenails.',\n      description: 'Please schedule me an appointment with podiatry.',\n    },\n    {\n      title: 'What can I take for my seasonal allergies?',\n      description:\n        'Please send me a list of over-the-counter medications that are safe for me to take.',\n    },\n  ],\n}\n","import React from 'react'\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native'\n\nconst PrebuiltTask = ({ prebuiltTask, view }) => (\n  <View style={styles.buttonContainer}>\n    <TouchableOpacity style={{ height: 60 }} onPress={() => view(prebuiltTask)}>\n      <View style={[styles.container, {textAlign: 'center'}]}>\n        <Text style={styles.title}>{prebuiltTask.title}</Text>\n      </View>\n    </TouchableOpacity>\n    </View>\n)\n\nconst row = {\n  fontSize: 16,\n  marginLeft: 10,\n  marginRight: 10,\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    width: '70%',\n    maxWidth: 700,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n    marginTop: 20,\n    paddingTop: 5,\n    paddingBottom: 5,\n    width: '100%',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 5,\n  },\n  title: {\n    ...row,\n    fontWeight: '500',\n  },\n  dateDue: {\n    ...row,\n    fontStyle: 'italic',\n  },\n  incompleteStatus: {\n    ...row,\n    color: 'red',\n  },\n  completeStatus: {\n    ...row,\n    color: 'green',\n  },\n})\n\nexport default PrebuiltTask\n","import React from 'react'\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native'\nimport { PrebuiltTaskArray } from '../utils/dataTask'\nimport PrebuiltTask from '../components/PrebuiltTask'\n\nconst PrebuiltTaskScreen = ({ navigation, route }) => {\n  const view = (prebuiltTask) => {\n    navigation.navigate('CreateTaskScreen', { thisUser, prebuiltTask })\n  }\n\n  const thisUser = route.params.thisUser\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => {\n          return navigation.navigate('CreateTaskScreen', {\n            thisUser,\n          })\n        }}\n        style={styles.newTaskButton}\n      >\n        <Text style={styles.title}>Create Blank Task</Text>\n      </TouchableOpacity>\n    <View style={styles.container2}>\n      {PrebuiltTaskArray.tasks.map((prebuiltTask, idx) => (\n        <PrebuiltTask key={idx} prebuiltTask={prebuiltTask} view={view} />\n      ))}\n    </View>\n  </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 10,\n  },\n  container2: {\n    width: '85%',\n    alignItems: 'center',\n    maxWidth: 800,\n  },\n  newTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    width: '85%',\n    textAlign: 'center',\n    padding: 5,\n    maxWidth: 800,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  title: {\n    fontSize: 22,\n  },\n})\n\nexport default PrebuiltTaskScreen\n","import React, { useState } from 'react'\nimport { SafeAreaView, StyleSheet, Text } from 'react-native'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport Form from '../components/Form'\nimport { firebase } from '../firebase'\n\nconst EditTaskScreen = ({ navigation, route }) => {\n  const [submitError, setSubmitError] = useState('')\n  const task = route.params.task\n  const thisUser = route.params.thisUser\n  const userId = thisUser.id\n\n  // Update the 'newTask' variable based on user input\n  async function handleSubmit(values) {\n    const newTask = {\n      ...values,\n      dateModified: Date(),\n      status: 'Incomplete',\n    }\n\n    firebase\n      .database()\n      .ref(`users/${userId}/tasks/${task.id}`)\n      .set(newTask)\n      .catch((error) => {\n        setSubmitError(error.message)\n      })\n\n    navigation.navigate('TaskDetailScreen', { task: newTask, thisUser })\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text label=\"Name\" style={styles.name}>\n        Task Edit Screen\n      </Text>\n      <ScrollView>\n        <Form\n          initialValues={{\n            ...task,\n          }}\n          onSubmit={(values) => {\n            handleSubmit(values)\n          }}\n        >\n          <Form.Field\n            name=\"title\"\n            placeholder=\"Enter task name\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"description\"\n            placeholder=\"Enter task description\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Field\n            name=\"dateDue\"\n            placeholder=\"Enter due date for this task\"\n            autoCapitalize=\"none\"\n          />\n          <Form.Button title={'Save changes'} />\n          <Form.ErrorMessage error={submitError} />\n        </Form>\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  addTaskButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'black',\n    backgroundColor: '#c3a6ff',\n    textAlign: 'center',\n    padding: 5,\n    shadowOffset: { width: 2, height: 2 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  container: {\n    flex: 1,\n    marginTop: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: '90%',\n  },\n  h1_text: {\n    fontSize: 48,\n    marginBottom: 25,\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  field: {\n    padding: 5,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 18,\n  },\n  fieldContainer: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  label: {\n    fontWeight: 'bold',\n  },\n  name: {\n    fontSize: 24,\n    marginBottom: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  connectButton: {\n    margin: 30,\n    padding: 10,\n    textAlign: 'center',\n    backgroundColor: 'lightblue',\n  },\n  connectText: {\n    fontSize: 22,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    // fontWeight: 500,\n  },\n  roleButton: {\n    backgroundColor: '#2196F3',\n    fontSize: 16,\n    width: 250,\n    padding: 15,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'black',\n    textAlign: 'center',\n  },\n})\n\nexport default EditTaskScreen\n","import React, { useEffect, useState } from 'react'\nimport {\n  StatusBar,\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  Button,\n  TouchableOpacity,\n} from 'react-native'\nimport { firebase } from '../firebase'\n\nconst MessageField = ({ message }) => {\n  return (\n    <View style={styles.fieldContainer}>\n      <Text style={styles.fieldText}>{message}</Text>\n      {/* <Text style={styles.field}>{value}</Text> */}\n    </View>\n  )\n}\n\nconst RenderMessages = ({ messages }) => {\n  return (\n    <ScrollView>\n      {messages.length > 0 ? (\n        messages.map((message, idx) => (\n          <MessageField key={idx} message={message} />\n        ))\n      ) : (\n        <MessageField message={'No messages.'} />\n      )}\n    </ScrollView>\n  )\n}\n\n// View message screen\nconst ViewMessagesScreen = ({ navigation, route }) => {\n  const task = route.params.task\n  const thisUser = route.params.thisUser\n  const userId = thisUser.id\n\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    const db = firebase\n      .database()\n      .ref(`users/${userId}/tasks/${task.id}/comments`)\n    const handleData = (snap) => {\n      if (snap.val()) {\n        const val = snap.val()\n        const messageList = Object.values(val)\n        setMessages(messageList)\n      }\n    }\n    db.on('value', handleData, (error) => console.log(error))\n    return () => db.off('value', handleData)\n  }, [])\n\n  return (\n    <View style={styles.container}>\n      <View>\n        <RenderMessages messages={messages}></RenderMessages>\n      </View>\n      <TouchableOpacity \n        style={styles.lightPurpleButtonColor}\n        onPress={() =>\n          navigation.navigate('CreateMessageScreen', {\n            user: thisUser,\n            task: task,\n          })}\n      >\n        <Text style={styles.blackButtonText}>New Message</Text>\n      </TouchableOpacity>\n\n      <StatusBar style=\"auto\" />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    paddingTop: 30,\n  },\n\n  userContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  fieldContainer: {\n    borderWidth: 1,\n    borderRadius: 5,\n    padding: 10,\n    margin: 5,\n    justifyContent: 'center',\n  },\n  fieldText: {\n    marginBottom: 10,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  roleButton: {\n    backgroundColor: '#2196F3',\n    fontSize: 16,\n    margin: 15,\n    width: 250,\n    padding: 15,\n    textAlign: 'center',\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'ghostwhite',\n    textAlign: 'center',\n  },\n  lightPurpleButtonColor: {\n    borderWidth: 1,\n    borderColor: 'black',\n    textAlign: 'center',\n    shadowOffset: { width: 1, height: 1 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n    padding: 10,\n    margin: 10,\n    width: '70%',\n    maxWidth: 800,\n    height: 40,\n    backgroundColor: '#c3a6ff',\n    justifyContent: 'center',\n  },\n  blackButtonText: {\n    color: 'black',\n    fontSize: 18,\n  },\n})\n\nexport default ViewMessagesScreen\n","import React, { useState } from 'react'\nimport {\n  SafeAreaView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native'\nimport { firebase } from '../firebase'\nimport { ScrollView } from 'react-native-gesture-handler'\nimport Form from '../components/Form'\n\nconst CreateMessageScreen = ({ navigation, route }) => {\n  const [messageSent, setMessageSent] = useState(false)\n\n  const user = route.params.user\n  const userId = user.id\n  const task = route.params.task\n\n  async function handleSubmit(values) {\n    const { message } = values\n    firebase\n      .database()\n      .ref(`users/${userId}/tasks/${task.id}/comments`)\n      .child(Date.now())\n      .set(message)\n      .catch((error) => {\n        setSubmitError(error.message)\n        console.log(error.message)\n      })\n    setMessageSent(true)\n  }\n\n  const placeholder = 'Enter message'\n  return (\n    <SafeAreaView style={styles.container}>\n      {!messageSent && (\n        <Text label=\"Name\" style={styles.name}>\n          Post a message on this task\n        </Text>\n      )}\n\n      {messageSent ? (\n        <View>\n          <Text label=\"Name\" style={styles.name}>\n            Message successfully posted!\n          </Text>\n          <TouchableOpacity\n            style={styles.connectButton}\n            onPress={() => {\n              navigation.navigate('ViewMessagesScreen', {\n                thisUser: user,\n                task: task,\n              })\n            }}\n          >\n            <Text style={styles.connectText}>Return to message board</Text>\n          </TouchableOpacity>\n        </View>\n      ) : (\n        <ScrollView>\n          <Form\n            initialValues={{ message: '' }}\n            onSubmit={(message) => handleSubmit(message)}\n          >\n            <Form.Field\n              name=\"message\"\n              leftIcon=\"inbox\"\n              placeholder={placeholder}\n              autoCapitalize=\"none\"\n              autoFocus={true}\n              multiline={true}\n              numberOfLines={20}\n            />\n            <Form.Button title={'Send Message'} />\n          </Form>\n        </ScrollView>\n      )}\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: '90%',\n  },\n  field: {\n    padding: 5,\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 18,\n  },\n  fieldContainer: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  label: {\n    fontWeight: 'bold',\n  },\n  name: {\n    fontSize: 24,\n    marginBottom: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  developerImage: {\n    width: 200,\n    height: 300,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginBottom: 10,\n  },\n  connectButton: {\n    margin: 30,\n    padding: 10,\n    textAlign: 'center',\n    backgroundColor: '#c3a6ff',\n    shadowOffset: { width: 1, height: 1 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  connectText: {\n    fontSize: 22,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n})\n\nexport default CreateMessageScreen\n","import React, { useState, useEffect } from 'react'\nimport {\n  StatusBar,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n} from 'react-native'\n\n// Original home screen\n// Currently not used\nconst AppViewScreen = ({ navigation }) => {\n  const [roles, setRoles] = useState({});\n\n  return (\n    <View style={styles.container}>\n      <Text h1 style={styles.h1_text}>\n        Welcome to Myelin!\n      </Text>\n      <Text h3 style={styles.h3_text}>\n        Are you a:\n      </Text>\n      <View>\n        <TouchableOpacity\n          style={styles.roleButton}\n          onPress={() => {\n            const roles = {role: 'careTeam'};\n            navigation.navigate('RegisterScreen', {roles});\n          }}\n        >\n          <Text style={styles.buttonText}>Care Team Member</Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TouchableOpacity\n          style={styles.roleButton}\n          onPress={() => {\n            const roles = {role: 'patient'};\n            navigation.navigate('RegisterScreen', {roles});\n          }}\n        >\n          <Text style={styles.buttonText}>Patient/Caregiver</Text>\n        </TouchableOpacity>\n      </View>\n\n      <StatusBar style=\"auto\" />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n  userContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  h1_text: {\n    fontSize: 48,\n    marginBottom: 25,\n  },\n  h3_text: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  h4_text: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginBottom: 15,\n  },\n  roleButton: {\n    backgroundColor: '#c3a6ff',\n    fontSize: 16,\n    margin: 15,\n    width: 250,\n    padding: 15,\n    textAlign: 'center',\n    shadowOffset: { width: 1, height: 1 },\n    shadowColor: 'black',\n    shadowOpacity: 1.0,\n  },\n  buttonText: {\n    fontSize: 20,\n    color: 'black',\n    textAlign: 'center',\n  },\n})\n\nexport default AppViewScreen","import React, { useState } from 'react'\nimport { SafeAreaView, ScrollView, StyleSheet, Text, View } from 'react-native'\nimport * as Yup from 'yup'\nimport Form from '../components/Form'\nimport { firebase } from '../firebase'\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Please enter a valid email')\n    .email()\n    .label('Email'),\n  password: Yup.string()\n    .required()\n    .min(6, 'Password must have at least 6 characters')\n    .label('Password'),\n  confirm: Yup.string().oneOf(\n    [Yup.ref('password'), null],\n    'Confirmation password must match password'\n  ),\n})\n\nconst RegisterScreen = ({ route, navigation }) => {\n  const [signInError, setSignInError] = useState('')\n\n  async function handleOnLogin(values) {\n    const { email, password } = values\n    setSignInError(null)\n    try {\n      await firebase.auth().signInWithEmailAndPassword(email, password)\n      route.params.roles.role === 'careTeam' \n      ? \n      navigation.navigate('ViewPatientsScreen') // Care team goes here\n      :\n      navigation.navigate('MainTasksScreen', {user: {id: 'Chris'}, role: 'patient'}) // Patients/caregiver goes here\n                                                                    // (Temporarily) always navigate to Chris's account\n    } catch (error) {\n      setSignInError(error.message)\n    }\n  }\n\n  async function handleOnSignUp(values) {\n    const { name, email, password} = values\n    setSignInError(null)\n    try {\n      const authCredential = await firebase\n        .auth()\n        .createUserWithEmailAndPassword(email, password)\n      const user = authCredential.user\n      await user.updateProfile({ displayName: name })\n      route.params.roles.role === 'careTeam' \n      ? \n      navigation.navigate('ViewPatientsScreen') // Care team goes here\n      :\n      navigation.navigate('MainTasksScreen', {user}) // Patients/caregiver goes here\n    } catch (error) {\n      setSignInError(error.message)\n    }\n  }\n\n  async function handleOnSubmit(values) {\n    return values.confirmPassword ? handleOnSignUp(values) : handleOnLogin(values)\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text style={styles.h1_text}>Welcome {route.params.roles.role}s!</Text>\n      <ScrollView>\n        <Form\n          initialValues={{\n            email: '',\n            password: '',\n            confirmPassword: '',\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleOnSubmit}\n        >\n          <Form.Field\n            name=\"email\"\n            leftIcon=\"email\"\n            placeholder=\"Enter email\"\n            autoCapitalize=\"none\"\n            keyboardType=\"email-address\"\n            textContentType=\"emailAddress\"\n          />\n          <Form.Field\n            name=\"password\"\n            leftIcon=\"lock\"\n            placeholder=\"Enter password\"\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            secureTextEntry={true}\n            textContentType=\"password\"\n          />\n          <Form.Field\n            name=\"confirmPassword\"\n            leftIcon=\"lock\"\n            placeholder=\"Confirm password\"\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            secureTextEntry={true}\n            textContentType=\"password\"\n          />\n          <Form.Button\n            title={(values) => (values.confirmPassword ? 'Register' : 'Login')}\n          />\n          {<Form.ErrorMessage error={signInError} visible={true} />}\n        </Form>\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  h1_text: {\n    fontSize: 48,\n    marginBottom: 25,\n    textTransform: 'capitalize',\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n  },\n  field: {\n    height: 40,\n    width: 300,\n    padding: 5,\n    backgroundColor: 'white',\n  },\n  fieldContainer: {\n    marginBottom: 20,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.23,\n    shadowRadius: 2.62,\n    elevation: 4,\n  },\n  label: {\n    fontWeight: 'bold',\n  },\n})\n\nexport default RegisterScreen","import { createContext } from 'react';\n\nconst UserContext = createContext();\n\nexport default UserContext;","import React, { useState, useEffect } from 'react'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { StyleSheet, View, Button, Text } from 'react-native'\nimport { NavigationContainer } from '@react-navigation/native'\nimport MainTasksScreen from './screens/MainTasksScreen'\nimport TaskDetailScreen from './screens/TaskDetailScreen'\nimport CreateTaskScreen from './screens/CreateTaskScreen'\nimport ViewPatientsScreen from './screens/ViewPatientsScreen'\nimport PrebuiltTaskScreen from './screens/PrebuiltTaskScreen'\nimport EditTaskScreen from './screens/EditTaskScreen'\nimport ViewMessagesScreen from './screens/ViewMessagesScreen'\nimport CreateMessageScreen from './screens/CreateMessageScreen'\nimport AppViewScreen from './screens/AppViewScreen'\nimport RegisterScreen from './screens/RegisterScreen'\nimport { firebase } from './firebase'\nimport UserContext from './UserContext'\n\n\nconst Stack = createStackNavigator()\n\n// Logout button\nconst LogoutButton = ({ navigation }) => (\n  <View style={{marginRight: 10}}>\n     <Button\n      title=\"Logout\"\n      color=\"#db4d4d\"\n      onPress={() => {\n        firebase.auth().signOut()\n        navigation.navigate('AppViewScreen')\n      }}\n    />\n  </View>\n)\n\nexport default function App() {\n  const [user, setUser] = useState({ role: 'admin' })\n\n  const [auth, setAuth] = useState()\n\n  useEffect(() => {\n    if (auth && auth.uid) {\n      const db = firebase.database().ref('users').child(auth.uid)\n      const handleData = (snap) => {\n        setUser({ uid: auth.uid, ...snap.val() })\n      }\n      db.on('value', handleData, (error) => alert(error))\n      return () => {\n        db.off('value', handleData)\n      }\n    } else {\n      setUser(null)\n    }\n  }, [auth])\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((auth) => {\n      setAuth(auth)\n    })\n  }, [])\n\n  return (\n    <UserContext.Provider value={user}>\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={{\n          headerStyle: {\n            backgroundColor: '#610f94', // Some purple color\n          },\n          headerTintColor: 'white',\n          headerTitleStyle: {\n            alignSelf: 'center',\n            fontWeight: 'bold',\n          },\n          headerTitleContainerStyle: {\n            left: 0,\n            right: 0,\n          },\n        }}\n      >\n        <Stack.Screen\n          name=\"AppViewScreen\"\n          component={AppViewScreen}\n          options={{ title: 'Choose App View' }}\n        />\n        <Stack.Screen\n          name=\"RegisterScreen\"\n          component={RegisterScreen}\n          options={{ title: 'Register' }}\n        />\n        <Stack.Screen\n          name=\"ViewPatientsScreen\"\n          component={ViewPatientsScreen}\n          options={({ navigation }) => ({\n            title: 'Your Patients',\n            headerRight: () => (\n              user\n              ?\n              <LogoutButton navigation={navigation} />\n              :\n              <Text />\n            ),\n          })}\n        /> \n        <Stack.Screen\n          name=\"MainTasksScreen\"\n          component={MainTasksScreen}\n          options={({ navigation }) => ({\n            title: 'Main Tasks',\n            headerRight: () => (\n              user\n              ?\n              <LogoutButton navigation={navigation} />\n              :\n              <Text />\n            ),\n          })}\n        />\n        <Stack.Screen\n          name=\"PrebuiltTaskScreen\"\n          component={PrebuiltTaskScreen}\n          options={({ navigation }) => ({\n            title: 'Choose from Pre-Created Tasks',\n            headerRight: () => (\n              user\n              ?\n              <LogoutButton navigation={navigation} />\n              :\n              <Text />\n            ),\n          })}\n        />\n        <Stack.Screen\n          name=\"CreateTaskScreen\"\n          component={CreateTaskScreen}\n          options={({ navigation }) => ({\n            title: 'Create New Task',\n            headerRight: () => (\n              user\n              ?\n              <LogoutButton navigation={navigation} />\n              :\n              <Text />\n            ),\n          })}\n        />\n        <Stack.Screen\n          name=\"TaskDetailScreen\"\n          component={TaskDetailScreen}\n          options={({ navigation }) => ({\n            title: 'Task Details',\n            headerRight: () => (\n              user\n              ?\n              <LogoutButton navigation={navigation} />\n              :\n              <Text />\n            ),\n          })}\n        />\n        <Stack.Screen\n          name=\"ViewMessagesScreen\"\n          component={ViewMessagesScreen}\n          options={({ navigation }) => ({\n            title: 'View Message',\n            headerRight: () => (\n              user\n              ?\n              <LogoutButton navigation={navigation} />\n              :\n              <Text />\n            ),\n          })}\n        />\n        <Stack.Screen\n          name=\"EditTaskScreen\"\n          component={EditTaskScreen}\n          options={({ navigation }) => ({\n            title: 'Edit Task',\n            headerRight: () => (\n              user\n              ?\n              <LogoutButton navigation={navigation} />\n              :\n              <Text />\n            ),\n          })}\n        />\n        <Stack.Screen\n          name=\"CreateMessageScreen\"\n          component={CreateMessageScreen}\n          options={({ navigation }) => ({\n            title: 'New Message',\n            headerRight: () => (\n              user\n              ?\n              <LogoutButton navigation={navigation} />\n              :\n              <Text />\n            ),\n          })}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n    </UserContext.Provider>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n"],"sourceRoot":""}